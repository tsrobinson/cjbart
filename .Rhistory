test$x1 <- ifelse(abs(margin) < 0.1,1,0)
test <- data.frame(margin = runif(1000,-0.15,0.15))
test$x1 <- ifelse(abs(margin) < 0.05,1,0)
test$x1 <- ifelse(abs(test$margin) < 0.05,1,0)
test$x2 <- ifelse(abs(test$margin) < 0.1,1,0)
test$y <- rbinom(1000,1,0.5)
lm(y ~ x1 + x2, test)
summary(lm(y ~ x1 + x2, test))
test$x3 <- ifelse(abs(test$margin) < 0.5, 1, 0)
summary(lm(y ~ x1 + x2 + x3, test))
summary(lm(y ~ x1 + x2, test))
test$x3 <- ifelse(test$margin > 0, 1, 0)
summary(lm(y ~ x1 + x2 + x3, test))
getwd()
setwd("~/Dropbox (Personal)/cjbart")
library(devtools)
load_all()
load_all()
subjects <- 250
rounds <- 5
profiles <- 2
obs <- subjects*rounds*profiles
fake_data <- data.frame(A = sample(c("a1","a2","a3"), obs, replace = TRUE),
B = sample(c("b1","b2","b3"), obs, replace = TRUE),
C = sample(c("c1","c2","c3"), obs, replace = TRUE),
D = sample(c("d1","d2","d3"), obs, replace = TRUE),
E = sample(c("e1","e2","e3"), obs, replace = TRUE),
covar1 = rep(runif(subjects, 0 ,1),
each = rounds),
covar2 = rep(sample(c(1,0),
subjects,
replace = TRUE),
each = rounds),
id1 = rep(1:subjects, each=rounds),
stringsAsFactors = TRUE)
fake_data$Y <- sample(c(1,2,3,4,5), length(fake_data$Y), replace = TRUE)
fake_data <- data.frame(A = sample(c("a1","a2","a3"), obs, replace = TRUE),
B = sample(c("b1","b2","b3"), obs, replace = TRUE),
C = sample(c("c1","c2","c3"), obs, replace = TRUE),
D = sample(c("d1","d2","d3"), obs, replace = TRUE),
E = sample(c("e1","e2","e3"), obs, replace = TRUE),
covar1 = rep(runif(subjects, 0 ,1),
each = rounds),
covar2 = rep(sample(c(1,0),
subjects,
replace = TRUE),
each = rounds),
id1 = rep(1:subjects, each=rounds),
stringsAsFactors = TRUE)
fake_data$Y <- sample(c(1,2,3,4,5), length(fake_data$Y), replace = TRUE)
fake_data$Y <- sample(c(1,2,3,4,5), nrow(fake_data), replace = TRUE)
View(fake_data)
cj_model <- cjbart::cjbart(data = fake_data,
Y = "Y",
id = "id1")
het_effects <- cjbart::IMCE(data = fake_data,
model = cj_model,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
cores = 1)
het_effects <- cjbart::IMCE(data = fake_data,
model = cj_model,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
cores = 8)
het_effects <- cjbart::IMCE(data = fake_data,
model = cj_model,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
cores = 1)
View(cj_model)
data = fake_data
model = cj_model
attribs = c("A","B","C","D","E")
ref_levels = c("a1","b1","c1","d1","e1")
cores = 8
method = "bayes"
alpha = 0.05
keep_omce = FALSE
skip_checks = FALSE
data <- as.data.frame(data)
# Get variables from trained model
Y <- model$Y_col
round <- model$round_col
id <- model$id_col
type <- model$type
# Check optional args
if (!(method %in% c("average","bayes","rubin"))) {
stop("Variance estimation method must be in c('parametric','bayes','rubin'). See ?OMCE for more details.")
}
if (!skip_checks) {
test_data <- data[,!(names(data) %in% c(attribs, Y, round))]
if (is.data.frame(test_data)) { # Skip if only one variable left (assume it is id)
test_data <- test_data[!duplicated(test_data),]
if(!(id %in% names(test_data))) {
stop("Could not find id variable in data")
}
if(nrow(test_data) != length(unique(test_data[[id]]))) {
warning("Covariates vary within id: if this is not intentional, please check your data")
}
}
if (!sum(sapply(attribs, function(x) class(data[[x]])) %in% c("character","factor")) == length(attribs)) {
stop("Conjoint attribute columns must be character vectors")
}
rm(test_data)
gc()
}
# Frame to store OMCEs
results <- data[,!(names(data) %in% c(attribs, Y))]
# If only attribs and id in data.frame, conditional to correct formatting
if (!is.data.frame(results)) {
if (identical(results,data[[id]])) {
results <- as.data.frame(results)
names(results) <- id
} else {
stop("Results frame creation failed")
}
}
# Variance and interval frames
var_omce <- data.frame(row.names = 1:nrow(data))
imce_lower <- imce_upper <- data.frame(row.names = 1:length(unique(data[[id]])))
# Data frame for predicting outcomes
train_vars <- names(data)[!(names(data) %in% c(id,Y))]
data_predict <- data[,train_vars]
# Vector to store attribute names (for future function calls)
out_levels <- c()
i = 1
message("Calculating OMCEs for attribute: ", attribs[i], " [",i,"/",length(attribs),"]")
att_levels <- unique(data[[attribs[i]]][data[[attribs[i]]] != ref_levels[i]])
out_levels <- c(out_levels, as.character(att_levels))
X_pred0 <- data_predict
X_pred0 <- .char_to_fact(X_pred0)
X_pred0[[attribs[i]]] <- factor(ref_levels[i],
levels = levels(X_pred0[[attribs[i]]]))
type
phat_0 <- .quiet(
predict(
model,
newdata = BART::bartModelMatrix(X_pred0),
mc.cores = cores
)
)$yhat.test
phat_0 <- .quiet(
predict(
model,
newdata = BART::bartModelMatrix(X_pred0),
mc.cores = cores
)
)
if (type == "choice") {
phat_0 <- .quiet(
predict(
model,
newdata = BART::bartModelMatrix(X_pred0),
mc.cores = cores
)
)$prob.test
} else {
phat_0 <- .quiet(
predict(
model,
newdata = BART::bartModelMatrix(X_pred0),
mc.cores = cores
)
)
}
att_level = att_levels[1]
X_pred1 <- X_pred0
X_pred1[[attribs[i]]] <- factor(att_level,
levels = levels(X_pred0[[attribs[i]]]))
# Get predictions
if (type == "choice") {
phat_1 <- .quiet(
predict(
model,
newdata = BART::bartModelMatrix(X_pred1),
mc.cores = cores
)
)$prob.test
} else {
phat_1 <- .quiet(
predict(
model,
newdata = BART::bartModelMatrix(X_pred1),
mc.cores = cores
)
)$yhat.test
}
# Get predictions
if (type == "choice") {
phat_1 <- .quiet(
predict(
model,
newdata = BART::bartModelMatrix(X_pred1),
mc.cores = cores
)
)$prob.test
} else {
phat_1 <- .quiet(
predict(
model,
newdata = BART::bartModelMatrix(X_pred1),
mc.cores = cores
)
)
}
method == "bayes"
# Save interval as vector to make code easier to read.
intvl <- c(alpha/2, (1-alpha/2))
# Calculate distribution of marginal effects
var_z <- phat_1 - phat_0
# Calculate IMCE interval at this point to avoid holding many frames in memory
imce_ci <- sapply(
unique(data[[id]]), function(s) stats::quantile(var_z[,data[[id]] == s], intvl)
)
imce_lower[[as.character(att_level)]] <- imce_ci[1,]
imce_upper[[as.character(att_level)]] <- imce_ci[2,]
imce_lower[["id"]] <- imce_upper[["id"]] <- colnames(imce_ci)
rm(var_z, imce_ci)
rm(X_pred1, phat_1)
gc()
View(results)
as.character(att_level)
View(results)
# Get OMCE for single attribute-level comparison and store
results[[as.character(att_level)]] <- colMeans(phat_1) - colMeans(phat_0)
message("Calculating OMCEs for attribute: ", attribs[i], " [",i,"/",length(attribs),"]")
att_levels <- unique(data[[attribs[i]]][data[[attribs[i]]] != ref_levels[i]])
out_levels <- c(out_levels, as.character(att_levels))
X_pred0 <- data_predict
X_pred0 <- .char_to_fact(X_pred0)
X_pred0[[attribs[i]]] <- factor(ref_levels[i],
levels = levels(X_pred0[[attribs[i]]]))
if (type == "choice") {
phat_0 <- .quiet(
predict(
model,
newdata = BART::bartModelMatrix(X_pred0),
mc.cores = cores
)
)$prob.test
} else {
phat_0 <- .quiet(
predict(
model,
newdata = BART::bartModelMatrix(X_pred0),
mc.cores = cores
)
)
}
for (att_level in att_levels) {
X_pred1 <- X_pred0
X_pred1[[attribs[i]]] <- factor(att_level,
levels = levels(X_pred0[[attribs[i]]]))
# Get predictions
if (type == "choice") {
phat_1 <- .quiet(
predict(
model,
newdata = BART::bartModelMatrix(X_pred1),
mc.cores = cores
)
)$prob.test
} else {
phat_1 <- .quiet(
predict(
model,
newdata = BART::bartModelMatrix(X_pred1),
mc.cores = cores
)
)
}
## Note, prob.test.mean is equivalent to
# stats::pnorm(colMeans(pred_0$yhat.test))
# Get OMCE for single attribute-level comparison and store
results[[as.character(att_level)]] <- colMeans(phat_1) - colMeans(phat_0)
var_omce[[as.character(att_level)]] <- apply(phat_1 - phat_0, 2, stats::var)
if (method == "bayes") {
# Save interval as vector to make code easier to read.
intvl <- c(alpha/2, (1-alpha/2))
# Calculate distribution of marginal effects
var_z <- phat_1 - phat_0
# Calculate IMCE interval at this point to avoid holding many frames in memory
imce_ci <- sapply(
unique(data[[id]]), function(s) stats::quantile(var_z[,data[[id]] == s], intvl)
)
imce_lower[[as.character(att_level)]] <- imce_ci[1,]
imce_upper[[as.character(att_level)]] <- imce_ci[2,]
imce_lower[["id"]] <- imce_upper[["id"]] <- colnames(imce_ci)
rm(var_z, imce_ci)
}
rm(X_pred1, phat_1)
gc()
}
View(results)
fake_data$Y_c <- sample(c(1,2,3,4,5), nrow(fake_data), replace = TRUE)
fake_data$Y_b <- sample(c(0,1), nrow(fake_data), replace = TRUE)
mod_c <- cjbart::cjbart(data = fake_data,
Y = "Y_c",
id = "id1")
mod_b <- cjbart::cjbart(data = fake_data,
Y = "Y_b",
id = "id1")
model = het_b
model = mod_b
data = fake_data
data <- as.data.frame(data)
# Get variables from trained model
Y <- model$Y_col
round <- model$round_col
id <- model$id_col
type <- model$type
type
# Check optional args
if (!(method %in% c("average","bayes","rubin"))) {
stop("Variance estimation method must be in c('parametric','bayes','rubin'). See ?OMCE for more details.")
}
if (!skip_checks) {
test_data <- data[,!(names(data) %in% c(attribs, Y, round))]
if (is.data.frame(test_data)) { # Skip if only one variable left (assume it is id)
test_data <- test_data[!duplicated(test_data),]
if(!(id %in% names(test_data))) {
stop("Could not find id variable in data")
}
if(nrow(test_data) != length(unique(test_data[[id]]))) {
warning("Covariates vary within id: if this is not intentional, please check your data")
}
}
if (!sum(sapply(attribs, function(x) class(data[[x]])) %in% c("character","factor")) == length(attribs)) {
stop("Conjoint attribute columns must be character vectors")
}
rm(test_data)
gc()
}
# Frame to store OMCEs
results <- data[,!(names(data) %in% c(attribs, Y))]
# If only attribs and id in data.frame, conditional to correct formatting
if (!is.data.frame(results)) {
if (identical(results,data[[id]])) {
results <- as.data.frame(results)
names(results) <- id
} else {
stop("Results frame creation failed")
}
}
# Variance and interval frames
var_omce <- data.frame(row.names = 1:nrow(data))
imce_lower <- imce_upper <- data.frame(row.names = 1:length(unique(data[[id]])))
# Data frame for predicting outcomes
train_vars <- names(data)[!(names(data) %in% c(id,Y))]
data_predict <- data[,train_vars]
# Vector to store attribute names (for future function calls)
out_levels <- c()
i = 1
message("Calculating OMCEs for attribute: ", attribs[i], " [",i,"/",length(attribs),"]")
att_levels <- unique(data[[attribs[i]]][data[[attribs[i]]] != ref_levels[i]])
out_levels <- c(out_levels, as.character(att_levels))
X_pred0 <- data_predict
X_pred0 <- .char_to_fact(X_pred0)
X_pred0[[attribs[i]]] <- factor(ref_levels[i],
levels = levels(X_pred0[[attribs[i]]]))
type == "choice"
.quiet(
predict(
model,
newdata = BART::bartModelMatrix(X_pred0),
mc.cores = cores
)
)$prob.test
phat_0 <- .quiet(
predict(
model,
newdata = BART::bartModelMatrix(X_pred0),
mc.cores = cores
)
)$prob.test
dims(phat_0)
dim(phat_0)
phat_0 <- .quiet(
predict(
model,
newdata = BART::bartModelMatrix(X_pred0),
mc.cores = cores
)
)
?predict.pbart
?predict.wbart
subjects <- 250
rounds <- 5
profiles <- 2
obs <- subjects*rounds*profiles
fake_data <- data.frame(A = sample(c("a1","a2","a3"), obs, replace = TRUE),
B = sample(c("b1","b2","b3"), obs, replace = TRUE),
C = sample(c("c1","c2","c3"), obs, replace = TRUE),
D = sample(c("d1","d2","d3"), obs, replace = TRUE),
E = sample(c("e1","e2","e3"), obs, replace = TRUE),
covar1 = rep(runif(subjects, 0 ,1),
each = rounds),
covar2 = rep(sample(c(1,0),
subjects,
replace = TRUE),
each = rounds),
id1 = rep(1:subjects, each=rounds),
stringsAsFactors = TRUE)
fake_data$Y_c <- sample(c(1,2,3,4,5), nrow(fake_data), replace = TRUE)
fake_data$Y_b <- sample(c(0,1), nrow(fake_data), replace = TRUE)
mod_c <- cjbart::cjbart(data = fake_data,
Y = "Y_c",
id = "id1")
load_all()
subjects <- 250
rounds <- 5
profiles <- 2
obs <- subjects*rounds*profiles
fake_data <- data.frame(A = sample(c("a1","a2","a3"), obs, replace = TRUE),
B = sample(c("b1","b2","b3"), obs, replace = TRUE),
C = sample(c("c1","c2","c3"), obs, replace = TRUE),
D = sample(c("d1","d2","d3"), obs, replace = TRUE),
E = sample(c("e1","e2","e3"), obs, replace = TRUE),
covar1 = rep(runif(subjects, 0 ,1),
each = rounds),
covar2 = rep(sample(c(1,0),
subjects,
replace = TRUE),
each = rounds),
id1 = rep(1:subjects, each=rounds),
stringsAsFactors = TRUE)
fake_data$Y_c <- sample(c(1,2,3,4,5), nrow(fake_data), replace = TRUE)
fake_data$Y_b <- sample(c(0,1), nrow(fake_data), replace = TRUE)
mod_c <- cjbart::cjbart(data = fake_data,
Y = "Y_c",
id = "id1")
mod_b <- cjbart::cjbart(data = fake_data,
Y = "Y_b",
id = "id1")
het_c <- cjbart::IMCE(data = fake_data,
model = cj_model,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
cores = 8)
het_c <- cjbart::IMCE(data = fake_data,
model = mod_c,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
cores = 8)
mod_c <- cjbart::cjbart(data = fake_data %>% select(-Y_b),
Y = "Y_c",
id = "id1")
mod_c <- cjbart::cjbart(data = fake_data[,-"Y_b"],
Y = "Y_c",
id = "id1")
mod_c <- cjbart::cjbart(data = fake_data[,-c("Y_b")],
Y = "Y_c",
id = "id1")
mod_c <- cjbart::cjbart(data = fake_data[,names(fake_data != "Y_b")],
Y = "Y_c",
id = "id1")
mod_c <- cjbart::cjbart(data = fake_data[,names(fake_data) != "Y_b"],
Y = "Y_c",
id = "id1")
mod_b <- cjbart::cjbart(data = fake_data[,names(fake_data) != "Y_c"],
Y = "Y_b",
id = "id1")
het_c <- cjbart::IMCE(data = fake_data,
model = mod_c,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
cores = 8)
het_c <- cjbart::IMCE(data = fake_data[,names(fake_data) != "Y_b"],
model = mod_c,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
cores = 8)
data_c <- fake_data[,names(fake_data) != "Y_b"]
data_b <- fake_data[,names(fake_data) != "Y_c"]
subjects <- 250
rounds <- 5
profiles <- 2
obs <- subjects*rounds*profiles
fake_data <- data.frame(A = sample(c("a1","a2","a3"), obs, replace = TRUE),
B = sample(c("b1","b2","b3"), obs, replace = TRUE),
C = sample(c("c1","c2","c3"), obs, replace = TRUE),
D = sample(c("d1","d2","d3"), obs, replace = TRUE),
E = sample(c("e1","e2","e3"), obs, replace = TRUE),
covar1 = rep(runif(subjects, 0 ,1),
each = rounds),
covar2 = rep(sample(c(1,0),
subjects,
replace = TRUE),
each = rounds),
id1 = rep(1:subjects, each=rounds),
stringsAsFactors = TRUE)
fake_data$Y_c <- sample(c(1,2,3,4,5), nrow(fake_data), replace = TRUE)
fake_data$Y_b <- sample(c(0,1), nrow(fake_data), replace = TRUE)
data_c <- fake_data[,names(fake_data) != "Y_b"]
data_b <- fake_data[,names(fake_data) != "Y_c"]
mod_c <- cjbart::cjbart(data = data_c,
Y = "Y_c",
id = "id1")
mod_b <- cjbart::cjbart(data = data_b,
Y = "Y_b",
id = "id1")
het_c <- cjbart::IMCE(data = data_c,
model = mod_c,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
cores = 8)
het_b <- cjbart::IMCE(data = data_b,
model = mod_b,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
cores = 8)
