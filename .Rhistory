rand_coefs <- runif(17)
X$Y <- rand_coefs[1] +
rand_coefs[2]*X$X1^2 +
rand_coefs[3]*X$X2^2 +
rand_coefs[4]*X$X3^2 +
rand_coefs[5]*X$X4^2 +
rand_coefs[6]*X$X5^2 +
rand_coefs[7]*X$X1*X$X2 +
rand_coefs[8]*X$X1*X$X3 +
rand_coefs[9]*X$X1*X$X4 +
rand_coefs[10]*X$X1*X$X5 +
rand_coefs[11]*X$X2*X$X3 +
rand_coefs[12]*X$X2*X$X4 +
rand_coefs[13]*X$X2*X$X5 +
rand_coefs[14]*X$X3*X$X4 +
rand_coefs[15]*X$X3*X$X5 +
rand_coefs[16]*X$X4*X$X5 +
rand_coefs[17]*X$X1*X$X2*X$X3*X$X4*X$X5
}
dgp <- function(n, seed = 89) {
set.seed(seed)
X <- data.frame(X1 = rnorm(n),
X2 = rnorm(n),
X3 = rnorm(n),
X4 = rnorm(n),
X5 = rnorm(n))
rand_coefs <- runif(17)
X$Y <- rand_coefs[1] +
rand_coefs[2]*X$X1^2 +
rand_coefs[3]*X$X2^2 +
rand_coefs[4]*X$X3^2 +
rand_coefs[5]*X$X4^2 +
rand_coefs[6]*X$X5^2 +
rand_coefs[7]*X$X1*X$X2 +
rand_coefs[8]*X$X1*X$X3 +
rand_coefs[9]*X$X1*X$X4 +
rand_coefs[10]*X$X1*X$X5 +
rand_coefs[11]*X$X2*X$X3 +
rand_coefs[12]*X$X2*X$X4 +
rand_coefs[13]*X$X2*X$X5 +
rand_coefs[14]*X$X3*X$X4 +
rand_coefs[15]*X$X3*X$X5 +
rand_coefs[16]*X$X4*X$X5 +
rand_coefs[17]*X$X1*X$X2*X$X3*X$X4*X$X5
}
real <- dgp(100000)
real
View(real)
dgp <- function(n, seed = 89) {
set.seed(seed)
X <- data.frame(X1 = rnorm(n),
X2 = rnorm(n),
X3 = rnorm(n),
X4 = rnorm(n),
X5 = rnorm(n))
rand_coefs <- runif(17)
X$Y <- rand_coefs[1] +
rand_coefs[2]*X$X1^2 +
rand_coefs[3]*X$X2^2 +
rand_coefs[4]*X$X3^2 +
rand_coefs[5]*X$X4^2 +
rand_coefs[6]*X$X5^2 +
rand_coefs[7]*X$X1*X$X2 +
rand_coefs[8]*X$X1*X$X3 +
rand_coefs[9]*X$X1*X$X4 +
rand_coefs[10]*X$X1*X$X5 +
rand_coefs[11]*X$X2*X$X3 +
rand_coefs[12]*X$X2*X$X4 +
rand_coefs[13]*X$X2*X$X5 +
rand_coefs[14]*X$X3*X$X4 +
rand_coefs[15]*X$X3*X$X5 +
rand_coefs[16]*X$X4*X$X5 +
rand_coefs[17]*X$X1*X$X2*X$X3*X$X4*X$X5
return(X)
}
real <- dgp(100000)
btsp <- sample(dgp(1000), 100000,replace = TRUE)
View(btsp)
btsp <- sample(1:1000, dgp(1000),replace = TRUE)
btsp <- btsp_real[sample(1:1000, 100000,replace = TRUE)
]
real <- dgp(100000)
real <- dgp(100000)
real <- dgp(100000)
btsp <- dgp(1000)[sample(1:1000, 100000,replace = TRUE),]
?KL
entropy <- function(target) {
freq <- table(target)/length(target)
# vectorize
vec <- as.data.frame(freq)[,2]
#drop 0 to avoid NaN resulting from log2
vec<-vec[vec>0]
#compute entropy
-sum(vec * log2(vec))
}
entropy(real$Y)
real <- dgp(100000)
btstp <- dgp(1000)[sample(1:1000, 100000,replace = TRUE),]
entropy <- function(target) {
freq <- table(target)/length(target)
# vectorize
vec <- as.data.frame(freq)[,2]
#drop 0 to avoid NaN resulting from log2
vec<-vec[vec>0]
#compute entropy
-sum(vec * log2(vec))
}
entropy(real$Y)
entropy(btstp$Y)
IG_numeric<-function(data, feature, target, bins=4) {
#Strip out rows where feature is NA
data<-data[!is.na(data[,feature]),]
#compute entropy for the parent
e0<-entropy(data[,target])
data$cat<-cut(data[,feature], breaks=bins, labels=c(1:bins))
#use dplyr to compute e and p for each value of the feature
dd_data <- data %>% group_by(cat) %>% summarise(e=entropy(get(target)),
n=length(get(target)),
min=min(get(feature)),
max=max(get(feature))
)
#calculate p for each value of feature
dd_data$p<-dd_data$n/nrow(data)
#compute IG
IG<-e0-sum(dd_data$p*dd_data$e)
return(IG)
}
IG_numeric(real, "X1", "Y", bins=5)
#use dplyr to compute e and p for each value of the feature
dd_data <- data |>| group_by(cat) %>% summarise(e=entropy(get(target)),
#use dplyr to compute e and p for each value of the feature
dd_data <- data |> group_by(cat) %>% summarise(e=entropy(get(target)),
n=length(get(target)),
min=min(get(feature)),
max=max(get(feature))
)
#use dplyr to compute e and p for each value of the feature
dd_data <- data |> group_by(cat) |> summarise(e=entropy(get(target)),
n=length(get(target)),
min=min(get(feature)),
max=max(get(feature))
)
library(tidyverse)
dgp <- function(n, seed = 89) {
set.seed(seed)
X <- data.frame(X1 = rnorm(n),
X2 = rnorm(n),
X3 = rnorm(n),
X4 = rnorm(n),
X5 = rnorm(n))
rand_coefs <- runif(17)
X$Y <- rand_coefs[1] +
rand_coefs[2]*X$X1^2 +
rand_coefs[3]*X$X2^2 +
rand_coefs[4]*X$X3^2 +
rand_coefs[5]*X$X4^2 +
rand_coefs[6]*X$X5^2 +
rand_coefs[7]*X$X1*X$X2 +
rand_coefs[8]*X$X1*X$X3 +
rand_coefs[9]*X$X1*X$X4 +
rand_coefs[10]*X$X1*X$X5 +
rand_coefs[11]*X$X2*X$X3 +
rand_coefs[12]*X$X2*X$X4 +
rand_coefs[13]*X$X2*X$X5 +
rand_coefs[14]*X$X3*X$X4 +
rand_coefs[15]*X$X3*X$X5 +
rand_coefs[16]*X$X4*X$X5 +
rand_coefs[17]*X$X1*X$X2*X$X3*X$X4*X$X5
return(X)
}
real <- dgp(100000)
btstp <- dgp(1000)[sample(1:1000, 100000,replace = TRUE),]
entropy <- function(target) {
freq <- table(target)/length(target)
# vectorize
vec <- as.data.frame(freq)[,2]
#drop 0 to avoid NaN resulting from log2
vec<-vec[vec>0]
#compute entropy
-sum(vec * log2(vec))
}
entropy(real$Y)
entropy(btstp$Y)
IG_numeric<-function(data, feature, target, bins=4) {
#Strip out rows where feature is NA
data<-data[!is.na(data[,feature]),]
#compute entropy for the parent
e0<-entropy(data[,target])
data$cat<-cut(data[,feature], breaks=bins, labels=c(1:bins))
#use dplyr to compute e and p for each value of the feature
dd_data <- data %>% group_by(cat) %>% summarise(e=entropy(get(target)),
n=length(get(target)),
min=min(get(feature)),
max=max(get(feature))
)
#calculate p for each value of feature
dd_data$p<-dd_data$n/nrow(data)
#compute IG
IG<-e0-sum(dd_data$p*dd_data$e)
return(IG)
}
IG_numeric(real, "X1", "Y", bins=5)
IG_numeric(btstp, "X1", "Y", bins=5)
IG_numeric(real, "X1", "Y", bins=10)
IG_numeric(btstp, "X1", "Y", bins=10)
IG_numeric(real, "X1", "Y", bins=100)
IG_numeric(btstp, "X1", "Y", bins=100)
IG_numeric(real, "X1", "Y", bins=100)
IG_numeric(btstp, "X1", "Y", bins=100)
IG_numeric(real, "X2", "Y", bins=100)
IG_numeric(btstp, "X2", "Y", bins=100)
IG_numeric(btstp, "X3", "Y", bins=100)
IG_numeric(real, "X3", "Y", bins=100)
IG_numeric(btstp, "X3", "Y", bins=100)
IG_numeric(real, "X4", "Y", bins=100)
IG_numeric(btstp, "X4", "Y", bins=100)
IG_numeric(real, "X4", "Y", bins=5)
IG_numeric(btstp, "X4", "Y", bins=5)
IG_numeric(real, "X5", "Y", bins=5)
IG_numeric(btstp, "X5", "Y", bins=5)
data(setosa)
data(iris)
unique(iris$Species)
summary(real$Y)
dgp <- function(n) {
X <- data.frame(X1 = rnorm(n),
X2 = rnorm(n),
X3 = rnorm(n),
X4 = rnorm(n),
X5 = rnorm(n))
rand_coefs <- runif(17)
X$Y <- rand_coefs[1] +
rand_coefs[2]*X$X1^2 +
rand_coefs[3]*X$X2^2 +
rand_coefs[4]*X$X3^2 +
rand_coefs[5]*X$X4^2 +
rand_coefs[6]*X$X5^2 +
rand_coefs[7]*X$X1*X$X2 +
rand_coefs[8]*X$X1*X$X3 +
rand_coefs[9]*X$X1*X$X4 +
rand_coefs[10]*X$X1*X$X5 +
rand_coefs[11]*X$X2*X$X3 +
rand_coefs[12]*X$X2*X$X4 +
rand_coefs[13]*X$X2*X$X5 +
rand_coefs[14]*X$X3*X$X4 +
rand_coefs[15]*X$X3*X$X5 +
rand_coefs[16]*X$X4*X$X5 +
rand_coefs[17]*X$X1*X$X2*X$X3*X$X4*X$X5
return(X)
}
real <- dgp(100000)
real
real$Y
summary(real$Y)
1/(1+exp(-real$Y))
summary(1/(1+exp(-real$Y)))
table(real$Y)/length(real$Y)
dgp <- function(n) {
X <- data.frame(X1 = rnorm(n),
X2 = rnorm(n),
X3 = rnorm(n),
X4 = rnorm(n),
X5 = rnorm(n))
rand_coefs <- runif(17)
X$Y <- rand_coefs[1] +
rand_coefs[2]*X$X1^2 +
rand_coefs[3]*X$X2^2 +
rand_coefs[4]*X$X3^2 +
rand_coefs[5]*X$X4^2 +
rand_coefs[6]*X$X5^2 +
rand_coefs[7]*X$X1*X$X2 +
rand_coefs[8]*X$X1*X$X3 +
rand_coefs[9]*X$X1*X$X4 +
rand_coefs[10]*X$X1*X$X5 +
rand_coefs[11]*X$X2*X$X3 +
rand_coefs[12]*X$X2*X$X4 +
rand_coefs[13]*X$X2*X$X5 +
rand_coefs[14]*X$X3*X$X4 +
rand_coefs[15]*X$X3*X$X5 +
rand_coefs[16]*X$X4*X$X5 +
rand_coefs[17]*X$X1*X$X2*X$X3*X$X4*X$X5
return(X)
}
real <- dgp(100000)
btstp <- dgp(1000)[sample(1:1000, 100000,replace = TRUE),]
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y
summary(dgp(100000)$Y)
install.packages("ForeCA")
library(ForeCA)
density(real$Y)
continuous_entropy(density(real$Y),0,1)
continuous_entropy(density(real$Y)$y,0,1)
density(real$Y)$y
density(real$Y)
density(real$Y)$y
?density
integrate(density(real$Y)$y)
dgp <- function(n) {
X <- data.frame(X1 = rnorm(n),
X2 = rnorm(n),
X3 = rnorm(n),
X4 = rnorm(n),
X5 = rnorm(n))
rand_coefs <- runif(17)
X$Y <- rand_coefs[1] +
rand_coefs[2]*X$X1^2 +
rand_coefs[3]*X$X2^2 +
rand_coefs[4]*X$X3^2 +
rand_coefs[5]*X$X4^2 +
rand_coefs[6]*X$X5^2 +
rand_coefs[7]*X$X1*X$X2 +
rand_coefs[8]*X$X1*X$X3 +
rand_coefs[9]*X$X1*X$X4 +
rand_coefs[10]*X$X1*X$X5 +
rand_coefs[11]*X$X2*X$X3 +
rand_coefs[12]*X$X2*X$X4 +
rand_coefs[13]*X$X2*X$X5 +
rand_coefs[14]*X$X3*X$X4 +
rand_coefs[15]*X$X3*X$X5 +
rand_coefs[16]*X$X4*X$X5 +
rand_coefs[17]*X$X1*X$X2*X$X3*X$X4*X$X5
X$P <- 1/(1+exp(-X$Y))
return(X)
}
real <- dgp(100000)
btstp <- dgp(1000)[sample(1:1000, 100000,replace = TRUE),]
dgp <- function(n) {
X <- data.frame(X1 = rnorm(n),
X2 = rnorm(n),
X3 = rnorm(n),
X4 = rnorm(n),
X5 = rnorm(n))
rand_coefs <- runif(17)
X$Y <- rand_coefs[1] +
rand_coefs[2]*X$X1^2 +
rand_coefs[3]*X$X2^2 +
rand_coefs[4]*X$X3^2 +
rand_coefs[5]*X$X4^2 +
rand_coefs[6]*X$X5^2 +
rand_coefs[7]*X$X1*X$X2 +
rand_coefs[8]*X$X1*X$X3 +
rand_coefs[9]*X$X1*X$X4 +
rand_coefs[10]*X$X1*X$X5 +
rand_coefs[11]*X$X2*X$X3 +
rand_coefs[12]*X$X2*X$X4 +
rand_coefs[13]*X$X2*X$X5 +
rand_coefs[14]*X$X3*X$X4 +
rand_coefs[15]*X$X3*X$X5 +
rand_coefs[16]*X$X4*X$X5 +
rand_coefs[17]*X$X1*X$X2*X$X3*X$X4*X$X5
X$P <- 1/(1+exp(-X$Y))
X$Y_bin <- rbinom(n, 1, X$P)
return(X)
}
real <- dgp(100000)
btstp <- dgp(1000)[sample(1:1000, 100000,replace = TRUE),]
real$Y_bin
X$Y_bin <- ifelse(rbinom(n, 1, X$P) == 1, "A","B")
return(X)
dgp <- function(n) {
X <- data.frame(X1 = rnorm(n),
X2 = rnorm(n),
X3 = rnorm(n),
X4 = rnorm(n),
X5 = rnorm(n))
rand_coefs <- runif(17)
X$Y <- rand_coefs[1] +
rand_coefs[2]*X$X1^2 +
rand_coefs[3]*X$X2^2 +
rand_coefs[4]*X$X3^2 +
rand_coefs[5]*X$X4^2 +
rand_coefs[6]*X$X5^2 +
rand_coefs[7]*X$X1*X$X2 +
rand_coefs[8]*X$X1*X$X3 +
rand_coefs[9]*X$X1*X$X4 +
rand_coefs[10]*X$X1*X$X5 +
rand_coefs[11]*X$X2*X$X3 +
rand_coefs[12]*X$X2*X$X4 +
rand_coefs[13]*X$X2*X$X5 +
rand_coefs[14]*X$X3*X$X4 +
rand_coefs[15]*X$X3*X$X5 +
rand_coefs[16]*X$X4*X$X5 +
rand_coefs[17]*X$X1*X$X2*X$X3*X$X4*X$X5
X$P <- 1/(1+exp(-X$Y))
X$Y_bin <- ifelse(rbinom(n, 1, X$P) == 1, "A","B")
return(X)
}
real <- dgp(100000)
btstp <- dgp(1000)[sample(1:1000, 100000,replace = TRUE),]
real$Y_bin
entropy(real$Y_bin)
entropy(btstp$Y_bin)
entropy(real$Y_bin)
entropy(btstp$Y_bin)
entropy(real$Y_bin)
entropy(btstp$Y_bin)
entropy(real$Y_bin)
entropy(btstp$Y_bin)
entropy(real$Y_bin)
entropy(btstp$Y_bin)
entropy(real$Y_bin)
entropy(btstp$Y_bin)
entropy(real$Y_bin)
entropy(btstp$Y_bin)
entropy(real$Y_bin)
entropy(btstp$Y_bin)
entropy(real$Y_bin)
entropy(btstp$Y_bin)
entropy(real$Y_bin)
entropy(btstp$Y_bin)
IG_numeric<-function(data, feature, target, bins=4) {
#Strip out rows where feature is NA
data<-data[!is.na(data[,feature]),]
#compute entropy for the parent
e0<-entropy(data[,target])
data$cat<-cut(data[,feature], breaks=bins, labels=c(1:bins))
#use dplyr to compute e and p for each value of the feature
dd_data <- data %>% group_by(cat) %>% summarise(e=entropy(get(target)),
n=length(get(target)),
min=min(get(feature)),
max=max(get(feature))
)
#calculate p for each value of feature
dd_data$p<-dd_data$n/nrow(data)
#compute IG
IG<-e0-sum(dd_data$p*dd_data$e)
return(IG)
}
IG_numeric(real, "X5", "Y_bin", bins=5)
IG_numeric(btstp, "X5", "Y_bin", bins=5)
IG_numeric(real, "X1", "Y_bin", bins=5)
IG_numeric(btstp, "X1", "Y_bin", bins=5)
entr_diff <- sapply(1:1000, function (x) {
real <- dgp(100000)
btstp <- dgp(1000)[sample(1:1000, 100000,replace = TRUE),]
return(entropy(real$Y_bin) - entropy(btstp$Y_bin))
})
entr_diff <- sapply(1:1000, function (x) {
cat("\r",x)
real <- dgp(100000)
btstp <- dgp(1000)[sample(1:1000, 100000,replace = TRUE),]
return(entropy(real$Y_bin) - entropy(btstp$Y_bin))
})
plot(density(entr_diff))
summary(entr_diff)
ggplot(entr_diff)
ggplot(as.data.frame(entr_diff))
ggplot(as.data.frame(entr_diff)) + geom_histogram()
ggplot(as.data.frame(entr_diff)) + geom_density()
as.data.frame(entr_diff)
ggplot(as.data.frame(entr_diff), aes(x = "entr_diff")) + geom_density()
ggplot(as.data.frame(entr_diff), aes(x = "entr_diff")) + geom_density()
plot(x=1)
s = exp(-.8633598 - .2526442)/(1+exp(-.8633598 - .2526442))
w = exp(-.3582649 - .2526442)/(1+exp(-.3582649 - .2526442))
e = exp(-.2526442)/(1+exp(-.2526442))
e2 = 1 - s -w
s = 1/(1+exp(-(-.8633598 - .2526442)))
w =1/(1+exp(-(-.3582649 - .2526442)))
setwd("~/db_personal/cjbart")
library(devtools)
check()
.Last.error
getwd()
devtools::check()
install.packages("randomForestSRC")
install.packages("randomForestSRC")
devtools::check()
devtools::check()
library(devtools)
check_rhub()
devtools::check_win_release()
RhpcBLASctl::
RhpcBLASctl
R
R.version
check()
devtools::check()
install.packages("devtools")
devtools::check()
devtools::release()
Windows Server 2022 x64
devtools::release()
2
devtools::release()
