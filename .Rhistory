document()
document()
check()
load_all()
load_all()
document()
check()
check()
BART::predict
pbart.predict
predict.pbart
library(BART)
BART
?BART
predict.pbart
check()
check()
check()
check()
source('~/Dropbox/cjbart/R/cjbart.R')
check()
check()
check()
check()
?pbart
check()
check()
document()
document()
document()
document()
document()
check()
document()
document()
document()
check()
check()
check()
?plot
check()
document()
?plot.cjbart
document()
?plot.cjbart
document()
?plot.cjbart
check()
check()
check()
?stats::predict
check()
check()
check()
check()
build()
install_github("tsrobinson/cjbart")
library(cjbart)
?plot.cjbart()
library(cjbart)
?plot.cjbart
library(BART)
plot.cjbart(mtcars)
detach("package:cjbart", unload = TRUE)
library(devtools)
build()
?plot.cjbart
??plot.cjbart
document()
build()
build()
check()
check()
check()
?arrange
?str_to_sentence
check()
?.data
.data
?rlang
?all_of
?n()
?element_blank
check()
?filter
check()
check()
check()
check()
predict()
predict.cjbart()
predict.cjbart
?predict.cjbart
build()
predict.cjbart
document()
predict.cjbart
devtools::install_github("tsrobinson/cjbart")
library(cjbart)
library(devtools)
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
build()
?plot.cjbat
?plot.cjbart
check()
build()
?plot.ggplot2
library(ggplot2)
document()
check()
build()
library(ggplot2)
?plot.ggplot
library(Amelia)
?plot.amelia
document()
check()
build()
methods(Summary)
methods(summary)
check()
check_rhub()
knitr::opts_chunk$set(echo = TRUE)
LOCAL <- identical(Sys.getenv("LOCAL"), "true")
subjects <- 500
rounds <- 5
obs <- subjects*rounds
fake_data <- data.frame(id1 = rep(1:subjects, each=rounds),
Y = sample(c(1,0), obs, replace = TRUE),
A = sample(c("a1","a2","a3"), obs, replace = TRUE),
B = sample(c("b1","b2","b3"), obs, replace = TRUE),
C = sample(c("c1","c2","c3"), obs, replace = TRUE),
D = sample(c("d1","d2","d3"), obs, replace = TRUE),
E = sample(c("e1","e2","e3"), obs, replace = TRUE),
covar1 = rep(runif(subjects, 0 ,100),
each = rounds),
covar2 = rep(sample(c(1,0), subjects, replace = TRUE),
each = rounds),
stringsAsFactors = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
subjects <- 500
rounds <- 5
obs <- subjects*rounds
fake_data <- data.frame(id1 = rep(1:subjects, each=rounds),
Y = sample(c(1,0), obs, replace = TRUE),
A = sample(c("a1","a2","a3"), obs, replace = TRUE),
B = sample(c("b1","b2","b3"), obs, replace = TRUE),
C = sample(c("c1","c2","c3"), obs, replace = TRUE),
D = sample(c("d1","d2","d3"), obs, replace = TRUE),
E = sample(c("e1","e2","e3"), obs, replace = TRUE),
covar1 = rep(runif(subjects, 0 ,100),
each = rounds),
covar2 = rep(sample(c(1,0), subjects, replace = TRUE),
each = rounds),
stringsAsFactors = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# LOCAL <- identical(Sys.getenv("LOCAL"), "true")
cj_model <- cjbart(data = fake_data,
Y_var = "Y",
id_var = "id1")
build()
library(cjbart)
cj_model <- cjbart(data = fake_data,
Y_var = "Y",
id_var = "id1")
cj_model <- cjbart(data = fake_data,
Y_var = "Y",
id_var = "id1")
View(fake_data)
data = fake_Data
data = fake_data
Y_var = "Y"
id_var = "id1"
Y_var
id_var
if (!(id_var %in% names(data))) {
stop("Supplied id_var not present in data.")
}
train_X <- data %>%
dplyr::select(-{{id_var}},-{{Y_var}}) %>%
dplyr::mutate_if(is.character, as.factor) %>%
as.data.frame(rlang::.data)
data %>%
dplyr::select(-{{id_var}},-{{Y_var}})
data %>%
dplyr::select(-{{id_var}},-{{Y_var}}) %>%
dplyr::mutate_if(is.character, as.factor)
data %>%
dplyr::select(-{{id_var}},-{{Y_var}}) %>%
dplyr::mutate_if(is.character, as.factor) %>%
as.data.frame(rlang::.data)
train_X <- data %>%
dplyr::select(-{{id_var}},-{{Y_var}}) %>%
dplyr::mutate_if(is.character, as.factor)
train_Y <- data[[Y_var]]
train_model <- BART::pbart(x.train = as.data.frame(train_X),
y.train = train_Y, ...)
train_model <- BART::pbart(x.train = as.data.frame(train_X),
y.train = train_Y
)
build()
document()
library(cjbart)
cj_model <- cjbart(data = fake_data,
Y_var = "Y",
id_var = "id1")
typeof(cj_model)
class(cj_model)
OMCE <- function(data = fake_data,
model = cj_model,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
Y_var = "Y",
id_var = "id1",
cores = 1)
het_effects <- OMCE(data = fake_data,
model = cj_model,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
Y_var = "Y",
id_var = "id1",
cores = 1)
het_effects <- OMCE(data = fake_data,
model = cj_model,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
Y_var = "Y",
id_var = "id1",
cores = 1)
model = cj_model
attribs = c("A","B","C","D","E")
ref_levels = c("a1","b1","c1","d1","e1")
Y_var = "Y"
id_var = "id1"
cores = 1
data <- as.data.frame(data)
# Data frame to store OMCEs
results <- data %>%
dplyr::select_if(!(names(rlang::.data) %in% attribs)) %>%
dplyr::select(-{{Y_var}})
data %>%
dplyr::select_if(!(names(rlang::.data) %in% attribs))
dplyr::select_if(!(names(data) %in% attribs),
.tbl = data)
# Data frame to store OMCEs
results <- dplyr::select_if(!(names(data) %in% attribs),
.tbl = data) %>%
dplyr::select(-{{Y_var}})
# Vector to store attribute names (for future function calls)
out_levels <- c()
for (i in 1:length(attribs)) {
message("Calculating OMCEs for attribute: ", attribs[i], " [",i,"/",length(attribs),"]")
att_levels <- unique(data[[attribs[i]]][data[[attribs[i]]] != ref_levels[i]])
out_levels <- c(out_levels, as.character(att_levels))
X_pred0 <- data %>%
dplyr::select(-{{Y_var}},
-{{id_var}}) %>%
dplyr::mutate_if(is.character, as.factor)
X_pred0[[attribs[i]]] <- factor(ref_levels[i],
levels = levels(data[[attribs[i]]]))
for (att_level in att_levels) {
X_pred1 <- data %>%
dplyr::select(-{{Y_var}},
-{{id_var}}) %>%
dplyr::mutate_if(is.character, as.factor)
X_pred1[[attribs[i]]] <- factor(att_level,
levels = levels(data[[attribs[i]]]))
# Get predictions
pred1 <- predict(model,
newdata = BART::bartModelMatrix(X_pred1),
mc.cores = cores)
pred1_prob <- stats::pnorm(colMeans(pred1$yhat.test)) # Converts probit to predicted probabilities
pred0 <- predict(model,
newdata = BART::bartModelMatrix(X_pred0),
mc.cores = cores)
pred0_prob <- stats::pnorm(colMeans(pred0$yhat.test))
# Get OMCE for single attribute-level comparison
att_level_OMCE <- pred1_prob - pred0_prob
# Store results in data.frame
results[[as.character(att_level)]] <- att_level_OMCE
}
}
covars <- results %>%
dplyr::select(-tidyselect::all_of(out_levels)) %>%
dplyr::distinct(rlang::.data)
covars <- dplyr::select(-tidyselect::all_of(out_levels),
.data = results) %>%
dplyr::distinct(rlang::.data)
dplyr::select(-tidyselect::all_of(out_levels),
.data = results)
dplyr::select(-tidyselect::all_of(out_levels),
.data = results) %>%
dplyr::distinct(rlang::.data)
dplyr::select(-tidyselect::all_of(out_levels),
.data = results) %>%
dplyr::distinct(.data = rlang::.data)
dplyr::select(-tidyselect::all_of(out_levels),
.data = results) %>%
dplyr::distinct()
document()
build()
dplyr::select(-tidyselect::all_of(out_levels),
.data = results)
test <- dplyr::select(-tidyselect::all_of(out_levels),
.data = results)
test
class(test)
dplyr::select(-tidyselect::all_of(out_levels),
.data = results) %>%
dplyr::distinct()
covars <- dplyr::select(-tidyselect::all_of(out_levels),
.data = results) %>%
dplyr::distinct()
if(nrow(covars) != length(unique(results[[id_var]]))) {
stop("Covariates vary within id.")
}
if(!(id_var %in% names(covars))) {
stop("Could not find id variable in covariate matrix")
}
results_imce <- results %>%
dplyr::group_by_at(id_var) %>%
dplyr::summarise_at(out_levels, mean) %>%
dplyr::left_join(covars, by = {{id_var}})
document()
build()
het_effects <- OMCE(data = fake_data,
model = cj_model,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
Y_var = "Y",
id_var = "id1",
cores = 1)
# Get predictions
pred1 <- predict(model,
newdata = BART::bartModelMatrix(X_pred1),
mc.cores = cores)
# Get predictions
pred1 <- predict(model,
newdata = BART::bartModelMatrix(X_pred1),
mc.cores = cores,
printevery = NULL)
# Get predictions
pred1 <- predict(model,
newdata = BART::bartModelMatrix(X_pred1),
mc.cores = cores,
printevery = NA)
# Get predictions
pred1 <- predict(model,
newdata = BART::bartModelMatrix(X_pred1),
mc.cores = cores,
printevery = 0)
build()
document()
build()
?cjbart
library(devtools)
browseVignettes("cjbart")
load_all()
browseVignettes("cjbart")
browseVignettes()
knitr::opts_chunk$set(echo = TRUE)
# LOCAL <- identical(Sys.getenv("LOCAL"), "true")
subjects <- 500
rounds <- 5
obs <- subjects*rounds
fake_data <- data.frame(id1 = rep(1:subjects, each=rounds),
Y = sample(c(1,0), obs, replace = TRUE),
A = sample(c("a1","a2","a3"), obs, replace = TRUE),
B = sample(c("b1","b2","b3"), obs, replace = TRUE),
C = sample(c("c1","c2","c3"), obs, replace = TRUE),
D = sample(c("d1","d2","d3"), obs, replace = TRUE),
E = sample(c("e1","e2","e3"), obs, replace = TRUE),
covar1 = rep(runif(subjects, 0 ,100),
each = rounds),
covar2 = rep(sample(c(1,0), subjects, replace = TRUE),
each = rounds),
stringsAsFactors = TRUE)
library(cjbart)
cj_model <- cjbart(data = fake_data,
Y_var = "Y",
id_var = "id1")
build()
library(devtools)
document()
build()
load_all()
library(cjbart)
cj_model <- cjbart(data = fake_data,
Y_var = "Y",
id_var = "id1")
het_effects <- OMCE(data = fake_data,
model = cj_model,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
Y_var = "Y",
id_var = "id1",
cores = 1)
data = fake_data
Y_var = "Y"
id_var = "id1"
if (missing(Y_var)) {
stop("Please declare the output variable using the Y_var argument.")
}
if (!missing(id_var)) {
if (!(id_var %in% names(data))) {
stop("Supplied id_var not present in data.")
}
}
if (!missing(id_var)) {
if (!(id_var %in% names(data))) {
stop("Supplied id_var not present in data.")
}
}
train_X <- dplyr::select(-{{id_var}},-{{Y_var}}, .data = data) %>%
dplyr::mutate_if(is.character, as.factor)
train_Y <- data[[Y_var]]
train_model <- BART::pbart(x.train = as.data.frame(train_X),
y.train = train_Y, ...)
train_model <- BART::pbart(x.train = as.data.frame(train_X),
y.train = train_Y
)
cj_model <- cjbart(data = fake_data,
Y_var = "Y",
id_var = "id1")
library(cjbart)
cj_model <- cjbart(data = fake_data,
Y_var = "Y",
id_var = "id1")
unlink('vignettes/cjbart_demo_cache', recursive = TRUE)
usethis::use_vignette("cjbart-demo")
library(devtools)
library(cjbart)
subjects <- 500
rounds <- 5
obs <- subjects*rounds
fake_data <- data.frame(id1 = rep(1:subjects, each=rounds),
Y = sample(c(1,0), obs, replace = TRUE),
A = sample(c("a1","a2","a3"), obs, replace = TRUE),
B = sample(c("b1","b2","b3"), obs, replace = TRUE),
C = sample(c("c1","c2","c3"), obs, replace = TRUE),
D = sample(c("d1","d2","d3"), obs, replace = TRUE),
E = sample(c("e1","e2","e3"), obs, replace = TRUE),
covar1 = rep(runif(subjects, 0 ,100),
each = rounds),
covar2 = rep(sample(c(1,0), subjects, replace = TRUE),
each = rounds),
stringsAsFactors = TRUE)
cj_model <- cjbart(data = fake_data,
Y_var = "Y",
id_var = "id1")
cj_model <- cjbart(data = fake_data,
Y_var = "Y",
id_var = "id1")
detach("package:cjbart", unload = TRUE)
cj_model <- cjbart(data = fake_data,
Y_var = "Y",
id_var = "id1")
library(cjbart)
detach("package:cjbart", unload = TRUE)
devtools::load_All()
devtools::load_all()
subjects <- 500
rounds <- 5
obs <- subjects*rounds
fake_data <- data.frame(id1 = rep(1:subjects, each=rounds),
Y = sample(c(1,0), obs, replace = TRUE),
A = sample(c("a1","a2","a3"), obs, replace = TRUE),
B = sample(c("b1","b2","b3"), obs, replace = TRUE),
C = sample(c("c1","c2","c3"), obs, replace = TRUE),
D = sample(c("d1","d2","d3"), obs, replace = TRUE),
E = sample(c("e1","e2","e3"), obs, replace = TRUE),
covar1 = rep(runif(subjects, 0 ,100),
each = rounds),
covar2 = rep(sample(c(1,0), subjects, replace = TRUE),
each = rounds),
stringsAsFactors = TRUE)
cj_model <- cjbart(data = fake_data,
Y_var = "Y",
id_var = "id1")
remove.packages("cjbart")
library(cjbart)
subjects <- 500
rounds <- 5
obs <- subjects*rounds
fake_data <- data.frame(id1 = rep(1:subjects, each=rounds),
Y = sample(c(1,0), obs, replace = TRUE),
A = sample(c("a1","a2","a3"), obs, replace = TRUE),
B = sample(c("b1","b2","b3"), obs, replace = TRUE),
C = sample(c("c1","c2","c3"), obs, replace = TRUE),
D = sample(c("d1","d2","d3"), obs, replace = TRUE),
E = sample(c("e1","e2","e3"), obs, replace = TRUE),
covar1 = rep(runif(subjects, 0 ,100),
each = rounds),
covar2 = rep(sample(c(1,0), subjects, replace = TRUE),
each = rounds),
stringsAsFactors = TRUE)
cj_model <- cjbart(data = fake_data,
Y_var = "Y",
id_var = "id1")
