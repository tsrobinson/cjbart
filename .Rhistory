covar2 = rep(sample(c(1,0), subjects, replace = TRUE),
each = rounds),
id1 = rep(1:subjects, each=rounds),
stringsAsFactors = TRUE)
fake_data$Y <- sample(c(1,0),
obs,
replace = TRUE,
prob = fake_data$covar1)
sapply(fake_data$covar1,)
?rbinom()
rbinom(obs, 1, fake_data$covar1)
subjects <- 500
rounds <- 5
obs <- subjects*rounds
fake_data <- data.frame(A = sample(c("a1","a2","a3"), obs, replace = TRUE),
B = sample(c("b1","b2","b3"), obs, replace = TRUE),
C = sample(c("c1","c2","c3"), obs, replace = TRUE),
D = sample(c("d1","d2","d3"), obs, replace = TRUE),
E = sample(c("e1","e2","e3"), obs, replace = TRUE),
covar1 = rep(runif(subjects, 0 ,1),
each = rounds),
covar2 = rep(sample(c(1,0), subjects, replace = TRUE),
each = rounds),
id1 = rep(1:subjects, each=rounds),
stringsAsFactors = TRUE)
fake_data$Y <- rbinom(obs, 1, fake_data$covar1)
cj_model <- cjbart(data = fake_data,
Y_var = "Y",
id_var = "id1")
het_effects <- cjbart::OMCE(data = fake_data,
model = cj_model,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
Y_var = "Y",
id_var = "id1",
cores = 1)
summary(het_effects)
plot(het_effects, covar = "covar1")
sample(c(0,1), obs, replace = TRUE)
library(cjbart)
subjects <- 500
rounds <- 5
obs <- subjects*rounds
fake_data <- data.frame(A = sample(c("a1","a2","a3"), obs, replace = TRUE),
B = sample(c("b1","b2","b3"), obs, replace = TRUE),
C = sample(c("c1","c2","c3"), obs, replace = TRUE),
D = sample(c("d1","d2","d3"), obs, replace = TRUE),
E = sample(c("e1","e2","e3"), obs, replace = TRUE),
covar1 = rep(runif(subjects, 0 ,1),
each = rounds),
covar2 = rep(sample(c(1,0), subjects, replace = TRUE),
each = rounds),
id1 = rep(1:subjects, each=rounds),
stringsAsFactors = TRUE)
fake_data$Y <- ifelse(fake_Data$E == "e2",
rbinom(obs, 1, fake_data$covar1),
sample(c(0,1), obs, replace = TRUE))
fake_data$Y <- ifelse(fake_data$E == "e2",
rbinom(obs, 1, fake_data$covar1),
sample(c(0,1), obs, replace = TRUE))
cj_model <- cjbart(data = fake_data,
Y_var = "Y",
id_var = "id1")
het_effects <- cjbart::OMCE(data = fake_data,
model = cj_model,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
Y_var = "Y",
id_var = "id1",
cores = 1)
summary(het_effects)
plot(het_effects, covar = "covar1")
library(cjbart)
set.seed(89)
subjects <- 500
rounds <- 5
obs <- subjects*rounds
fake_data <- data.frame(A = sample(c("a1","a2","a3"), obs, replace = TRUE),
B = sample(c("b1","b2","b3"), obs, replace = TRUE),
C = sample(c("c1","c2","c3"), obs, replace = TRUE),
D = sample(c("d1","d2","d3"), obs, replace = TRUE),
E = sample(c("e1","e2","e3"), obs, replace = TRUE),
covar1 = rep(runif(subjects, 0 ,1),
each = rounds),
covar2 = rep(sample(c(1,0), subjects, replace = TRUE),
each = rounds),
id1 = rep(1:subjects, each=rounds),
stringsAsFactors = TRUE)
fake_data$Y <- ifelse(fake_data$E == "e2",
rbinom(obs, 1, fake_data$covar1),
sample(c(0,1), obs, replace = TRUE))
cj_model <- cjbart(data = fake_data,
Y_var = "Y",
id_var = "id1")
het_effects <- cjbart::OMCE(data = fake_data,
model = cj_model,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
Y_var = "Y",
id_var = "id1",
cores = 1)
summary(het_effects)
plot(het_effects, covar = "covar1")
het_effects <- cjbart::OMCE(data = fake_data,
model = cj_model,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
Y_var = "Y",
id_var = "id1",
cores = 4)
document()
check()
install()
library(cjbart)
set.seed(89)
subjects <- 500
rounds <- 5
obs <- subjects*rounds
fake_data <- data.frame(A = sample(c("a1","a2","a3"), obs, replace = TRUE),
B = sample(c("b1","b2","b3"), obs, replace = TRUE),
C = sample(c("c1","c2","c3"), obs, replace = TRUE),
D = sample(c("d1","d2","d3"), obs, replace = TRUE),
E = sample(c("e1","e2","e3"), obs, replace = TRUE),
covar1 = rep(runif(subjects, 0 ,1),
each = rounds),
covar2 = rep(sample(c(1,0),
subjects,
replace = TRUE),
each = rounds),
id1 = rep(1:subjects, each=rounds),
stringsAsFactors = TRUE)
fake_data$Y <- ifelse(fake_data$E == "e2",
rbinom(obs, 1, fake_data$covar1),
sample(c(0,1), obs, replace = TRUE))
cj_model <- cjbart(data = fake_data,
Y_var = "Y",
id_var = "id1")
het_effects <- cjbart::OMCE(data = fake_data,
model = cj_model,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
Y_var = "Y",
id_var = "id1",
cores = 1)
vignette("cjbart-demo")
instal()
install()
library(cjbart)
vignette(package = "cjbart")
install()
devtools::install()
library(cjbart)
vignette
vignette()
devtools::build_vignettes()
check()
devtools::check()
check_rhub()
devtools::check_rhub()
subjects <- 500
rounds <- 5
obs <- subjects*rounds
fake_data <- data.frame(A = sample(c("a1","a2","a3"), obs, replace = TRUE),
B = sample(c("b1","b2","b3"), obs, replace = TRUE),
C = sample(c("c1","c2","c3"), obs, replace = TRUE),
D = sample(c("d1","d2","d3"), obs, replace = TRUE),
E = sample(c("e1","e2","e3"), obs, replace = TRUE),
covar1 = rep(runif(subjects, 0 ,1),
each = rounds),
covar2 = rep(sample(c(1,0),
subjects,
replace = TRUE),
each = rounds),
id1 = rep(1:subjects, each=rounds),
stringsAsFactors = TRUE)
fake_data$Y <- ifelse(fake_data$E == "e2",
rbinom(obs, 1, fake_data$covar1),
sample(c(0,1), obs, replace = TRUE))
cj_model <- cjbart(data = fake_data,
Y_var = "Y",
id_var = "id1")
data = fake_data
model = cj_model
attribs = c("A","B","C","D","E")
ref_levels = c("a1","b1","c1","d1","e1")
Y_var = "Y"
id_var = "id1"
cores = 1
data <- as.data.frame(data)
# Data frame to store OMCEs
results <- data[,!(names(data) %in% c(attribs, Y_var))]
# Data frame for predicting outcomes
train_vars <- names(data)[!(names(data) %in% c(id_var,Y_var))]
data_predict <- data[,train_vars]
# Vector to store attribute names (for future function calls)
out_levels <- c()
for (i in 1:length(attribs)) {
message("Calculating OMCEs for attribute: ", attribs[i], " [",i,"/",length(attribs),"]")
att_levels <- unique(data[[attribs[i]]][data[[attribs[i]]] != ref_levels[i]])
out_levels <- c(out_levels, as.character(att_levels))
X_pred0 <- data_predict
X_pred0 <- .char_to_fact(X_pred0)
X_pred0[[attribs[i]]] <- factor(ref_levels[i],
levels = levels(data[[attribs[i]]]))
for (att_level in att_levels) {
X_pred1 <- X_pred0
X_pred1[[attribs[i]]] <- factor(att_level,
levels = levels(data[[attribs[i]]]))
# Get predictions
pred1 <- .quiet(predict(model,
newdata = BART::bartModelMatrix(X_pred1),
mc.cores = cores)
)
pred1_prob <- stats::pnorm(colMeans(pred1$yhat.test)) # Converts probit to predicted probabilities
pred0 <- .quiet(predict(model,
newdata = BART::bartModelMatrix(X_pred0),
mc.cores = cores)
)
pred0_prob <- stats::pnorm(colMeans(pred0$yhat.test))
# Get OMCE for single attribute-level comparison
att_level_OMCE <- pred1_prob - pred0_prob
# Store results in data.frame
results[[as.character(att_level)]] <- att_level_OMCE
}
}
aggregate(formula = {{ id_var }} ~ 1,
data = results,
FUN = mean)
id_var
aggregate(formula = id_var ~ 1,
data = results,
FUN = mean)
aggregate(formula = !!id_var ~ 1,
data = results,
FUN = mean)
substitute(id_var)
deparse(substitute(id_var))
deparse(substitute(deparse(id_var))
)
substitute(deparse(id_var))
deparse(id_var)
aggregate(formula = deparse(id_var) ~ 1,
data = results,
FUN = mean)
quo(id_var)
enquo(id_var)
quote(id_var)
quote(substitute(deparse(id_Var)))
quote(substitute(deparse(id_var)))
aggregate(by = id_var,
data = results,
FUN = mean)
aggregate(by = id_var,
x = results,
FUN = mean)
class(results)
aggregate(x = results,
by = list(id_var)
FUN = mean)
aggregate(x = results,
by = list(id_var),
FUN = mean)
?cbind
out_levels
cbind(out_levels)
symbol(id_var)
aggregate(formula = cbind(out_levels) ~ results[[id_var]],
data = results,
FUN = mean)
results[[id_var]]
names(results[[id_var]])
paste0(out_levels, collapse = "")
paste0(out_levels, collapse = "+")
agg_formula <- as.formula(
paste0(
paste0(out_levels, collapse = "+"),
" ~ ",
id_var
)
)
agg_formula
aggregate(formula = agg_formula,
data = results,
FUN = mean)
results_imce2 <- aggregate(formula = agg_formula,
data = results,
FUN = mean)
results_imce <- dplyr::group_by_at(.vars = id_var, .tbl = results)
results_imce <- dplyr::summarise_at(out_levels, mean, .tbl = results_imce)
View(results_imce)
View(results_imce2)
paste0(out_levels, collapse = ", ")
as.formula(paste0(out_levels, collapse = ", "))
as.formula(paste0("cbind(",paste0(out_levels, collapse = ", "),") ~ ",id_var))
aggregate(formula = as.formula(paste0("cbind(",paste0(out_levels, collapse = ", "),") ~ ",id_var))
data = results,
FUN = mean)
agg_formula <- as.formula(paste0("cbind(",paste0(out_levels, collapse = ", "),") ~ ",id_var))
agg_formula
results_imce2 <- aggregate(formula = agg_formula,
data = results,
FUN = mean)
View(results_imce)
View(results_imce2)
agg_formula <- as.formula(
paste0(
"cbind(",
paste0(out_levels, collapse = ", "),
") ~ ",
id_var
)
)
results_imce2 <- aggregate(formula = agg_formula,
data = results,
FUN = mean)
results_imce <-
results_imce <- dplyr::left_join(results_imce, covars, by = {{id_var}})
covars <- results[,!(names(results) %in% out_levels)]
covars <- covars[!duplicated(covars),]
results_imce <-
results_imce <- dplyr::left_join(results_imce, covars, by = {{id_var}})
results_imce2 <- aggregate(formula = agg_formula,
data = results,
FUN = mean)
{{id_var}}
covars
View(covars)
merge(results_imce2, covars,
by = id_var)
results_imce2 <- merge(results_imce2, covars,
by = id_var)
View(results_imce2)
View(results_imce)
?OMCE
?pivot_longer()
out_obj <- list(omce = results,
imce = results_imce,
att_levels = out_levels)
class(out_obj) <- "cjbart"
x - out_obj
x = out_obj
plot_data <- tidyr::pivot_longer(cols = x$att_levels,
names_to = "att",
values_to = "mce",
data = plot_data)
if (type == "imce") {
plot_data <- x$imce
} else if (type == "omce") {
plot_data <- x$omce
} else {
stop("type not recognised -- please check you have specified either 'imce' or 'omce'")
}
type = "imce"
if (type == "imce") {
plot_data <- x$imce
} else if (type == "omce") {
plot_data <- x$omce
} else {
stop("type not recognised -- please check you have specified either 'imce' or 'omce'")
}
plot_data <- tidyr::pivot_longer(cols = x$att_levels,
names_to = "att",
values_to = "mce",
data = plot_data)
att_levels
x$att_levels
View(plot_data)
plot_data2 <- reshape(plot_data,
varying = x$att_levels,
v.names = "att",
times = "mce",
direction = "long")
plot_data2 <- reshape(plot_data,
varying = x$att_levels,
direction = "long")
x$att_levels
plot_data2 <- reshape(plot_data,
varying = x$att_levels,
idvar = "Subject",
v.names = "conc",
direction = "long")
if (type == "imce") {
plot_data <- x$imce
} else if (type == "omce") {
plot_data <- x$omce
} else {
stop("type not recognised -- please check you have specified either 'imce' or 'omce'")
}
if (type == "imce") {
data <- x$imce
} else if (type == "omce") {
data <- x$omce
} else {
stop("type not recognised -- please check you have specified either 'imce' or 'omce'")
}
plot_data <- tidyr::pivot_longer(cols = x$att_levels,
names_to = "att",
values_to = "mce",
data = data)
plot_data2 <- reshape(data,
varying = x$att_levels,
idvar = "Subject",
v.names = "conc",
direction = "long")
data
plot_data2 <- reshape(data,
varying = x$att_levels,
idvar = "Subject",
v.names = "conc",
direction = "long")
data
class(data)
data <- as.data.frame(data)
data
reshape(data,
varying = x$att_levels,
idvar = "Subject",
v.names = "conc",
direction = "long")
plot_data2 <- reshape(data,
varying = x$att_levels,
idvar = "Subject",
v.names = "conc",
direction = "long")
View(plot_data)
View(plot_data2)
plot_data2 <- reshape(data,
varying = x$att_levels,
v.names = "conc",
direction = "long")
x$imce
plot_data2 <- reshape(data,
varying = x$att_levels,
timevar = "id1"
v.names = "conc",
direction = "long")
plot_data2 <- reshape(data,
varying = x$att_levels,
timevar = "id1",
v.names = "conc",
direction = "long")
plot_data2 <- reshape(data,
varying = x$att_levels,
idvar = "id1",
v.names = "conc",
direction = "long")
plot_data2 <- reshape(data,
varying = x$att_levels,
idvar = "id1",
ids = "id1",
v.names = "conc",
direction = "long")
if (type == "imce") {
data <- x$imce
} else if (type == "omce") {
data <- x$omce
} else {
stop("type not recognised -- please check you have specified either 'imce' or 'omce'")
}
plot_data <- tidyr::pivot_longer(cols = x$att_levels,
names_to = "att",
values_to = "mce",
data = data)
plot_data
sort(plot_data$mce)
order(plot_data$mce)
n()
test <- by(plot_data,
INDICES = plot_data$att,
FUN = function(x){
x_ordered <- x[order(x$mce),]
x_ordered$x_order <- 1:nrow(x_order)
return(x_ordered)
})
test <- by(plot_data,
INDICES = plot_data$att,
FUN = function(x){
x_ordered <- x[order(x$mce),]
x_ordered$x_order <- 1:nrow(x_ordered)
return(x_ordered)
})
View(test)
plot_data2 <- do.call(
rbind,
by(
plot_data,
INDICES = plot_data$att,
FUN = function(x) {
x_ordered <- x[order(x$mce),]
x_ordered$x_order <- 1:nrow(x_ordered)
return(x_ordered)
}
)
)
plot_data <- dplyr::group_by(.data$att, .data = plot_data)
plot_data <- dplyr::arrange(dplyr::across("mce"),
.by_group = TRUE,
.data = plot_data)
plot_data <- dplyr::mutate(x_order = 1:dplyr::n(),
.data = plot_data)
View(plot_data)
View(plot_data2)
document()
library(devtools)
document()
check()
document()
check()
?as.formula
?aggregate
document()
check()
