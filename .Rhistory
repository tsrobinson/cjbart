print("hello")
## Set up commands -- follow this to set up on your own machine
install.packages("remotes")
remotes::install_github("rstudio/tensorflow")
install.packages("reticulate")
install.packages("reticulate")
tensorflow::install_tensorflow()
Y
install.packages("keras")
keras::install_keras()
install.packages("recipes")
# If you do not already have tidyverse installed:
install.packages("tidyverse")
## Double check everything's working:
library(tensorflow)
library(keras)
library(tidyverse)
library(recipes)
#### 1. Load packages and data ####
library(tensorflow)
library(keras)
library(tidyverse)
library(recipes)
set.seed(89)
## Read in the data
acic18 <- read_csv("https://raw.githubusercontent.com/grf-labs/grf/master/experiments/acic18/synthetic_data.csv") %>%
mutate(across(contains("C"), as.factor))
acic18_counterfac <- acic18 %>%
mutate(Z = case_when(Z == 1 ~ 0,
Z == 0 ~ 1))
# Construct a "recipe"
rec_obj <- recipe(Y ~ ., data = acic18) %>%
step_dummy(all_nominal(), -all_outcomes()) %>% # One-hot encode columns
step_center(all_predictors(), -all_outcomes()) %>% # Centre all predictors on 0
step_scale(all_predictors(), -all_outcomes()) %>% # Scale all predictors with sd=1
prep(data = adult)
x_train <- bake(rec_obj, new_data = acic18) %>% select(-Y)
x_test  <- bake(rec_obj, new_data = acic18_counterfac) %>% select(-Y)
y_train <- acic18$Y
## Construct a neural network
model <- keras_model_sequential() %>%
layer_dense(units = 32, activation = 'relu', input_shape = ncol(x_train)) %>%
layer_dense(units = 16, activation = 'relu') %>%
layer_dense(units = 1, activation = 'sigmoid') %>%
compile(
optimizer = 'sgd', # Stochastic gradient descent
loss      = 'mse', # Determines what is plotted while training occurs
)
history <- fit(
object = model,
x = as.matrix(x_train),
y = y_train,
batch_size = 50,
epochs = 50,
validation_split = 0.30
)
#### 5. Generate counterfactual predictions and plot ITEs ####
ITEs <- acic18 %>%
mutate(Y_counterfac = predict(model, as.matrix(x_test))) %>%
mutate(ITE = case_when(Z == 1 ~ (Y - Y_counterfac),
Z == 0 ~ (Y_counterfac - Y))) %>%
arrange(ITE) %>%
mutate(ITE_order = 1:nrow(.))
ggplot(ITEs, aes(x = ITE_order, y = ITE)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed")
View(ITEs)
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = X1)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed")
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = X1)) +
geom_line(SIZE = 1.5) +
geom_hline(yintercept = 0, linetype = "dashed")
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = X1)) +
geom_line(SIZE = 2) +
geom_hline(yintercept = 0, linetype = "dashed")
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = X1)) +
geom_line(SIZE = 3) +
geom_hline(yintercept = 0, linetype = "dashed")
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = X1)) +
geom_line(SIZE = 10) +
geom_hline(yintercept = 0, linetype = "dashed")
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = X1)) +
geom_line(size = 10) +
geom_hline(yintercept = 0, linetype = "dashed")
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = X1)) +
geom_line(size = 5) +
geom_hline(yintercept = 0, linetype = "dashed")
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = X1)) +
geom_line(size = 3) +
geom_hline(yintercept = 0, linetype = "dashed")
acic18$X1
?scale_color_continuous
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = X1)) +
geom_line(size = 3) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_continuous(type = "viridis")
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = X1)) +
geom_line(size = 3) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_continuous(type = "viridis")
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = X1)) +
geom_line(size = 3) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_continuous(type = "viridis")
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = X2)) +
geom_line(size = 3) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_continuous(type = "viridis")
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = X3)) +
geom_line(size = 3) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_continuous(type = "viridis")
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = X4)) +
geom_line(size = 3) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_continuous(type = "viridis")
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = X5)) +
geom_line(size = 3) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_continuous(type = "viridis")
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = X6)) +
geom_line(size = 3) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_continuous(type = "viridis")
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = c1)) +
geom_line(size = 3) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_continuous(type = "viridis")
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = C1)) +
geom_line(size = 3) +
geom_hline(yintercept = 0, linetype = "dashed") +
scale_color_continuous(type = "viridis")
ggplot(ITEs, aes(x = ITE_order, y = ITE, color = C1)) +
geom_line(size = 3) +
geom_hline(yintercept = 0, linetype = "dashed")
# Check correlations
corr_covars <- c("X1","X2","X3","X4","X5")
sapply(corr_covars, function (x) cor.test(ITEs[["ITE"]], ITEs[[x]]))
kruskal.test(ITE ~ C1, ITEs)
kruskal.test(ITE ~ C2, ITEs)
kruskal.test(ITE ~ C3, ITEs)
kruskal.test(ITE ~ C4, ITEs)
kruskal.test(ITE ~ C3, ITEs)
kruskal_vars <- c("C1","C2","C3")
sapply(kruskal_vars, function (x) kruskal.test(paste0("ITE ~ ",x), ITEs))
sapply(kruskal_vars, function (x) kruskal.test(as.formula(paste0("ITE ~ ",x)), ITEs))
library(BART)
data <- #INSERT COPY OF DATA HERE
?BART
library(tidyverse)
data <- data.frame(
b.corrup.norm.post = rnorm(1000) + 1,
b.corrup.norm = rnorm(1000),
treat = rbinom(1000,0.5),
age = sample(1:5,1000, replace = TRUE),
inv.income = sample(1:10,1000, replace = TRUE),
partisanship.scale = runif(1000,1,7),
educ.attain = sample(1:3, 1000, replace = TRUE),
civic.know = sample(1:3,1000, replace = TRUE),
pol;itical.com = sample(1:10,1000, replace = TRUE),
)
data <- data.frame(
b.corrup.norm.post = rnorm(1000) + 1,
b.corrup.norm = rnorm(1000),
treat = rbinom(1000,0.5),
age = sample(1:5,1000, replace = TRUE),
inv.income = sample(1:10,1000, replace = TRUE),
partisanship.scale = runif(1000,1,7),
educ.attain = sample(1:3, 1000, replace = TRUE),
civic.know = sample(1:3,1000, replace = TRUE),
pol;itical.com = sample(1:10,1000, replace = TRUE)
)
data <- data.frame(
b.corrup.norm.post = rnorm(1000) + 1,
b.corrup.norm = rnorm(1000),
treat = rbinom(1000,0.5),
age = sample(1:5,1000, replace = TRUE),
inv.income = sample(1:10,1000, replace = TRUE),
partisanship.scale = runif(1000,1,7),
educ.attain = sample(1:3, 1000, replace = TRUE),
civic.know = sample(1:3,1000, replace = TRUE),
pol;itical.com = sample(1:10,1000, replace = TRUE)
)
data <- data.frame(
b.corrup.norm.post = rnorm(1000) + 1,
b.corrup.norm = rnorm(1000),
treat = rbinom(1000,0.5),
age = sample(1:5,1000, replace = TRUE),
inv.income = sample(1:10,1000, replace = TRUE),
partisanship.scale = runif(1000,1,7),
educ.attain = sample(1:3, 1000, replace = TRUE),
civic.know = sample(1:3,1000, replace = TRUE),
political.com = sample(1:10,1000, replace = TRUE)
)
data <- data.frame(
b.corrup.norm.post = rnorm(1000) + 1,
b.corrup.norm = rnorm(1000),
treat = rbinom(1000, 1, 0.5),
age = sample(1:5,1000, replace = TRUE),
inv.income = sample(1:10,1000, replace = TRUE),
partisanship.scale = runif(1000,1,7),
educ.attain = sample(1:3, 1000, replace = TRUE),
civic.know = sample(1:3,1000, replace = TRUE),
political.com = sample(1:10,1000, replace = TRUE)
)
View(data)
data <- data.frame(
b.corrup.norm = rnorm(1000),
treat = rbinom(1000, 1, 0.5),
age = sample(1:5,1000, replace = TRUE),
inv.income = sample(1:10,1000, replace = TRUE),
partisanship.scale = runif(1000,1,7),
educ.attain = sample(1:3, 1000, replace = TRUE),
civic.know = sample(1:3,1000, replace = TRUE),
political.com = sample(1:10,1000, replace = TRUE)
) %>%
mutate(  b.corrup.norm.post = rnorm(1000) + 1)
library(BART)
library(tidyverse)
set.seed(89)
data <- data.frame(
b.corrup.norm = rnorm(1000),
treat = rbinom(1000, 1, 0.5),
age = sample(1:5,1000, replace = TRUE),
inv.income = sample(1:10,1000, replace = TRUE),
partisanship.scale = runif(1000,1,7),
educ.attain = sample(1:3, 1000, replace = TRUE),
civic.know = sample(1:3,1000, replace = TRUE),
political.com = sample(1:10,1000, replace = TRUE)
) %>%
mutate(b.corrup.norm.post = rnorm(1000) + 1)
bart_data <- data
as_factor)
bart_data <- data %>%
mutate(across(all_of(treat, age, inv.income, educ.attain, civic.know, political.com)),
as_factor)
?across
bart_data <- data %>%
mutate(across(all_of(treat, age, inv.income, educ.attain, civic.know, political.com),
as_factor))
bart_data <- data %>%
mutate(across(all_of(vars(treat, age, inv.income, educ.attain, civic.know, political.com)),
as_factor))
bart_data <- data %>%
mutate(across(c(treat, age, inv.income, educ.attain, civic.know, political.com),
as_factor))
View(bart_data)
str(bart_data)
x_train <- bart_data %>%
select(b.corrup.norm,
treat, age,
inv.income,
partisanship.scale,
educ.attain,
civic.know,
political.com)
y_train <- bart_data %>%
select(b.corrup.norm.post)
bart_data <- data %>%
mutate(across(c(treat, age, inv.income, educ.attain, civic.know, political.com),
as_factor)) %>%
drop_na() # Not best practise -- may be worth imputing but I'm not sure...
x_train <- bart_data %>%
select(b.corrup.norm,
treat, age,
inv.income,
partisanship.scale,
educ.attain,
civic.know,
political.com)
y_train <- bart_data %>%
select(b.corrup.norm.post)
x_test <- x_train %>%
mutate(treat = ifelse(treat == 1, 0, 1))
?wbart
wbart(x.train = x_train,
y.train = y_train,
x.test = x_test)
x_test <- x_train %>%
mutate(treat = ifelse(treat == 1, 0, 1))
View(x_test)
View(x_train)
library(BART)
library(tidyverse)
set.seed(89)
data <- data.frame(
b.corrup.norm = rnorm(1000),
treat = rbinom(1000, 1, 0.5),
age = sample(1:5,1000, replace = TRUE),
inv.income = sample(1:10,1000, replace = TRUE),
partisanship.scale = runif(1000,1,7),
educ.attain = sample(1:3, 1000, replace = TRUE),
civic.know = sample(1:3,1000, replace = TRUE),
political.com = sample(1:10,1000, replace = TRUE)
) %>%
mutate(b.corrup.norm.post = rnorm(1000) + 1)
bart_data <- data %>%
mutate(across(c(age, inv.income, educ.attain, civic.know, political.com),
as_factor)) %>%
drop_na() # Not best practise -- may be worth imputing but I'm not sure...
x_train <- bart_data %>%
select(b.corrup.norm,
treat, age,
inv.income,
partisanship.scale,
educ.attain,
civic.know,
political.com)
y_train <- bart_data %>%
select(b.corrup.norm.post)
x_test <- x_train %>%
mutate(treat = ifelse(treat == 1, 0, 1))
wbart(x.train = x_train,
y.train = y_train,
x.test = x_test)
length(y_train)
y_train <- bart_data$b.corrup.norm.post
x_test <- x_train %>%
mutate(treat = ifelse(treat == 1, 0, 1))
wbart(x.train = x_train,
y.train = y_train,
x.test = x_test)
bart_results <- wbart(x.train = x_train,
y.train = y_train,
x.test = x_test)
het_prediction
bart_data <- data %>%
mutate(across(c(age, inv.income, educ.attain, civic.know, political.com),
as_factor)) %>%
drop_na() # Not best practise -- may be worth imputing but I'm not sure...
cd("Dropbox/cjbart")
setwd("Dropbox/cjbart")
ls
ls()
library(devtools)
?devtools
load_all()
?cjbart
?het_vimp
?rf_vimp
library(BART)
?BART
cjbart
unload()
unload("cjbart")
install_github("tsrobinson/cjbart")
library(cjbart)
?cjbart
?het_vimp
