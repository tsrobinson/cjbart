}
real <- dgp(100000)
btsp <- sample(dgp(1000), 100000,replace = TRUE)
View(btsp)
btsp <- sample(1:1000, dgp(1000),replace = TRUE)
btsp <- btsp_real[sample(1:1000, 100000,replace = TRUE)
]
real <- dgp(100000)
real <- dgp(100000)
real <- dgp(100000)
btsp <- dgp(1000)[sample(1:1000, 100000,replace = TRUE),]
?KL
entropy <- function(target) {
freq <- table(target)/length(target)
# vectorize
vec <- as.data.frame(freq)[,2]
#drop 0 to avoid NaN resulting from log2
vec<-vec[vec>0]
#compute entropy
-sum(vec * log2(vec))
}
entropy(real$Y)
real <- dgp(100000)
btstp <- dgp(1000)[sample(1:1000, 100000,replace = TRUE),]
entropy <- function(target) {
freq <- table(target)/length(target)
# vectorize
vec <- as.data.frame(freq)[,2]
#drop 0 to avoid NaN resulting from log2
vec<-vec[vec>0]
#compute entropy
-sum(vec * log2(vec))
}
entropy(real$Y)
entropy(btstp$Y)
IG_numeric<-function(data, feature, target, bins=4) {
#Strip out rows where feature is NA
data<-data[!is.na(data[,feature]),]
#compute entropy for the parent
e0<-entropy(data[,target])
data$cat<-cut(data[,feature], breaks=bins, labels=c(1:bins))
#use dplyr to compute e and p for each value of the feature
dd_data <- data %>% group_by(cat) %>% summarise(e=entropy(get(target)),
n=length(get(target)),
min=min(get(feature)),
max=max(get(feature))
)
#calculate p for each value of feature
dd_data$p<-dd_data$n/nrow(data)
#compute IG
IG<-e0-sum(dd_data$p*dd_data$e)
return(IG)
}
IG_numeric(real, "X1", "Y", bins=5)
#use dplyr to compute e and p for each value of the feature
dd_data <- data |>| group_by(cat) %>% summarise(e=entropy(get(target)),
#use dplyr to compute e and p for each value of the feature
dd_data <- data |> group_by(cat) %>% summarise(e=entropy(get(target)),
n=length(get(target)),
min=min(get(feature)),
max=max(get(feature))
)
#use dplyr to compute e and p for each value of the feature
dd_data <- data |> group_by(cat) |> summarise(e=entropy(get(target)),
n=length(get(target)),
min=min(get(feature)),
max=max(get(feature))
)
library(tidyverse)
dgp <- function(n, seed = 89) {
set.seed(seed)
X <- data.frame(X1 = rnorm(n),
X2 = rnorm(n),
X3 = rnorm(n),
X4 = rnorm(n),
X5 = rnorm(n))
rand_coefs <- runif(17)
X$Y <- rand_coefs[1] +
rand_coefs[2]*X$X1^2 +
rand_coefs[3]*X$X2^2 +
rand_coefs[4]*X$X3^2 +
rand_coefs[5]*X$X4^2 +
rand_coefs[6]*X$X5^2 +
rand_coefs[7]*X$X1*X$X2 +
rand_coefs[8]*X$X1*X$X3 +
rand_coefs[9]*X$X1*X$X4 +
rand_coefs[10]*X$X1*X$X5 +
rand_coefs[11]*X$X2*X$X3 +
rand_coefs[12]*X$X2*X$X4 +
rand_coefs[13]*X$X2*X$X5 +
rand_coefs[14]*X$X3*X$X4 +
rand_coefs[15]*X$X3*X$X5 +
rand_coefs[16]*X$X4*X$X5 +
rand_coefs[17]*X$X1*X$X2*X$X3*X$X4*X$X5
return(X)
}
real <- dgp(100000)
btstp <- dgp(1000)[sample(1:1000, 100000,replace = TRUE),]
entropy <- function(target) {
freq <- table(target)/length(target)
# vectorize
vec <- as.data.frame(freq)[,2]
#drop 0 to avoid NaN resulting from log2
vec<-vec[vec>0]
#compute entropy
-sum(vec * log2(vec))
}
entropy(real$Y)
entropy(btstp$Y)
IG_numeric<-function(data, feature, target, bins=4) {
#Strip out rows where feature is NA
data<-data[!is.na(data[,feature]),]
#compute entropy for the parent
e0<-entropy(data[,target])
data$cat<-cut(data[,feature], breaks=bins, labels=c(1:bins))
#use dplyr to compute e and p for each value of the feature
dd_data <- data %>% group_by(cat) %>% summarise(e=entropy(get(target)),
n=length(get(target)),
min=min(get(feature)),
max=max(get(feature))
)
#calculate p for each value of feature
dd_data$p<-dd_data$n/nrow(data)
#compute IG
IG<-e0-sum(dd_data$p*dd_data$e)
return(IG)
}
IG_numeric(real, "X1", "Y", bins=5)
IG_numeric(btstp, "X1", "Y", bins=5)
IG_numeric(real, "X1", "Y", bins=10)
IG_numeric(btstp, "X1", "Y", bins=10)
IG_numeric(real, "X1", "Y", bins=100)
IG_numeric(btstp, "X1", "Y", bins=100)
IG_numeric(real, "X1", "Y", bins=100)
IG_numeric(btstp, "X1", "Y", bins=100)
IG_numeric(real, "X2", "Y", bins=100)
IG_numeric(btstp, "X2", "Y", bins=100)
IG_numeric(btstp, "X3", "Y", bins=100)
IG_numeric(real, "X3", "Y", bins=100)
IG_numeric(btstp, "X3", "Y", bins=100)
IG_numeric(real, "X4", "Y", bins=100)
IG_numeric(btstp, "X4", "Y", bins=100)
IG_numeric(real, "X4", "Y", bins=5)
IG_numeric(btstp, "X4", "Y", bins=5)
IG_numeric(real, "X5", "Y", bins=5)
IG_numeric(btstp, "X5", "Y", bins=5)
data(setosa)
data(iris)
unique(iris$Species)
summary(real$Y)
dgp <- function(n) {
X <- data.frame(X1 = rnorm(n),
X2 = rnorm(n),
X3 = rnorm(n),
X4 = rnorm(n),
X5 = rnorm(n))
rand_coefs <- runif(17)
X$Y <- rand_coefs[1] +
rand_coefs[2]*X$X1^2 +
rand_coefs[3]*X$X2^2 +
rand_coefs[4]*X$X3^2 +
rand_coefs[5]*X$X4^2 +
rand_coefs[6]*X$X5^2 +
rand_coefs[7]*X$X1*X$X2 +
rand_coefs[8]*X$X1*X$X3 +
rand_coefs[9]*X$X1*X$X4 +
rand_coefs[10]*X$X1*X$X5 +
rand_coefs[11]*X$X2*X$X3 +
rand_coefs[12]*X$X2*X$X4 +
rand_coefs[13]*X$X2*X$X5 +
rand_coefs[14]*X$X3*X$X4 +
rand_coefs[15]*X$X3*X$X5 +
rand_coefs[16]*X$X4*X$X5 +
rand_coefs[17]*X$X1*X$X2*X$X3*X$X4*X$X5
return(X)
}
real <- dgp(100000)
real
real$Y
summary(real$Y)
1/(1+exp(-real$Y))
summary(1/(1+exp(-real$Y)))
table(real$Y)/length(real$Y)
dgp <- function(n) {
X <- data.frame(X1 = rnorm(n),
X2 = rnorm(n),
X3 = rnorm(n),
X4 = rnorm(n),
X5 = rnorm(n))
rand_coefs <- runif(17)
X$Y <- rand_coefs[1] +
rand_coefs[2]*X$X1^2 +
rand_coefs[3]*X$X2^2 +
rand_coefs[4]*X$X3^2 +
rand_coefs[5]*X$X4^2 +
rand_coefs[6]*X$X5^2 +
rand_coefs[7]*X$X1*X$X2 +
rand_coefs[8]*X$X1*X$X3 +
rand_coefs[9]*X$X1*X$X4 +
rand_coefs[10]*X$X1*X$X5 +
rand_coefs[11]*X$X2*X$X3 +
rand_coefs[12]*X$X2*X$X4 +
rand_coefs[13]*X$X2*X$X5 +
rand_coefs[14]*X$X3*X$X4 +
rand_coefs[15]*X$X3*X$X5 +
rand_coefs[16]*X$X4*X$X5 +
rand_coefs[17]*X$X1*X$X2*X$X3*X$X4*X$X5
return(X)
}
real <- dgp(100000)
btstp <- dgp(1000)[sample(1:1000, 100000,replace = TRUE),]
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y)
summary(dgp(100000)$Y
summary(dgp(100000)$Y)
install.packages("ForeCA")
library(ForeCA)
density(real$Y)
continuous_entropy(density(real$Y),0,1)
continuous_entropy(density(real$Y)$y,0,1)
density(real$Y)$y
density(real$Y)
density(real$Y)$y
?density
integrate(density(real$Y)$y)
dgp <- function(n) {
X <- data.frame(X1 = rnorm(n),
X2 = rnorm(n),
X3 = rnorm(n),
X4 = rnorm(n),
X5 = rnorm(n))
rand_coefs <- runif(17)
X$Y <- rand_coefs[1] +
rand_coefs[2]*X$X1^2 +
rand_coefs[3]*X$X2^2 +
rand_coefs[4]*X$X3^2 +
rand_coefs[5]*X$X4^2 +
rand_coefs[6]*X$X5^2 +
rand_coefs[7]*X$X1*X$X2 +
rand_coefs[8]*X$X1*X$X3 +
rand_coefs[9]*X$X1*X$X4 +
rand_coefs[10]*X$X1*X$X5 +
rand_coefs[11]*X$X2*X$X3 +
rand_coefs[12]*X$X2*X$X4 +
rand_coefs[13]*X$X2*X$X5 +
rand_coefs[14]*X$X3*X$X4 +
rand_coefs[15]*X$X3*X$X5 +
rand_coefs[16]*X$X4*X$X5 +
rand_coefs[17]*X$X1*X$X2*X$X3*X$X4*X$X5
X$P <- 1/(1+exp(-X$Y))
return(X)
}
real <- dgp(100000)
btstp <- dgp(1000)[sample(1:1000, 100000,replace = TRUE),]
dgp <- function(n) {
X <- data.frame(X1 = rnorm(n),
X2 = rnorm(n),
X3 = rnorm(n),
X4 = rnorm(n),
X5 = rnorm(n))
rand_coefs <- runif(17)
X$Y <- rand_coefs[1] +
rand_coefs[2]*X$X1^2 +
rand_coefs[3]*X$X2^2 +
rand_coefs[4]*X$X3^2 +
rand_coefs[5]*X$X4^2 +
rand_coefs[6]*X$X5^2 +
rand_coefs[7]*X$X1*X$X2 +
rand_coefs[8]*X$X1*X$X3 +
rand_coefs[9]*X$X1*X$X4 +
rand_coefs[10]*X$X1*X$X5 +
rand_coefs[11]*X$X2*X$X3 +
rand_coefs[12]*X$X2*X$X4 +
rand_coefs[13]*X$X2*X$X5 +
rand_coefs[14]*X$X3*X$X4 +
rand_coefs[15]*X$X3*X$X5 +
rand_coefs[16]*X$X4*X$X5 +
rand_coefs[17]*X$X1*X$X2*X$X3*X$X4*X$X5
X$P <- 1/(1+exp(-X$Y))
X$Y_bin <- rbinom(n, 1, X$P)
return(X)
}
real <- dgp(100000)
btstp <- dgp(1000)[sample(1:1000, 100000,replace = TRUE),]
real$Y_bin
X$Y_bin <- ifelse(rbinom(n, 1, X$P) == 1, "A","B")
return(X)
dgp <- function(n) {
X <- data.frame(X1 = rnorm(n),
X2 = rnorm(n),
X3 = rnorm(n),
X4 = rnorm(n),
X5 = rnorm(n))
rand_coefs <- runif(17)
X$Y <- rand_coefs[1] +
rand_coefs[2]*X$X1^2 +
rand_coefs[3]*X$X2^2 +
rand_coefs[4]*X$X3^2 +
rand_coefs[5]*X$X4^2 +
rand_coefs[6]*X$X5^2 +
rand_coefs[7]*X$X1*X$X2 +
rand_coefs[8]*X$X1*X$X3 +
rand_coefs[9]*X$X1*X$X4 +
rand_coefs[10]*X$X1*X$X5 +
rand_coefs[11]*X$X2*X$X3 +
rand_coefs[12]*X$X2*X$X4 +
rand_coefs[13]*X$X2*X$X5 +
rand_coefs[14]*X$X3*X$X4 +
rand_coefs[15]*X$X3*X$X5 +
rand_coefs[16]*X$X4*X$X5 +
rand_coefs[17]*X$X1*X$X2*X$X3*X$X4*X$X5
X$P <- 1/(1+exp(-X$Y))
X$Y_bin <- ifelse(rbinom(n, 1, X$P) == 1, "A","B")
return(X)
}
real <- dgp(100000)
btstp <- dgp(1000)[sample(1:1000, 100000,replace = TRUE),]
real$Y_bin
entropy(real$Y_bin)
entropy(btstp$Y_bin)
entropy(real$Y_bin)
entropy(btstp$Y_bin)
entropy(real$Y_bin)
entropy(btstp$Y_bin)
entropy(real$Y_bin)
entropy(btstp$Y_bin)
entropy(real$Y_bin)
entropy(btstp$Y_bin)
entropy(real$Y_bin)
entropy(btstp$Y_bin)
entropy(real$Y_bin)
entropy(btstp$Y_bin)
entropy(real$Y_bin)
entropy(btstp$Y_bin)
entropy(real$Y_bin)
entropy(btstp$Y_bin)
entropy(real$Y_bin)
entropy(btstp$Y_bin)
IG_numeric<-function(data, feature, target, bins=4) {
#Strip out rows where feature is NA
data<-data[!is.na(data[,feature]),]
#compute entropy for the parent
e0<-entropy(data[,target])
data$cat<-cut(data[,feature], breaks=bins, labels=c(1:bins))
#use dplyr to compute e and p for each value of the feature
dd_data <- data %>% group_by(cat) %>% summarise(e=entropy(get(target)),
n=length(get(target)),
min=min(get(feature)),
max=max(get(feature))
)
#calculate p for each value of feature
dd_data$p<-dd_data$n/nrow(data)
#compute IG
IG<-e0-sum(dd_data$p*dd_data$e)
return(IG)
}
IG_numeric(real, "X5", "Y_bin", bins=5)
IG_numeric(btstp, "X5", "Y_bin", bins=5)
IG_numeric(real, "X1", "Y_bin", bins=5)
IG_numeric(btstp, "X1", "Y_bin", bins=5)
entr_diff <- sapply(1:1000, function (x) {
real <- dgp(100000)
btstp <- dgp(1000)[sample(1:1000, 100000,replace = TRUE),]
return(entropy(real$Y_bin) - entropy(btstp$Y_bin))
})
entr_diff <- sapply(1:1000, function (x) {
cat("\r",x)
real <- dgp(100000)
btstp <- dgp(1000)[sample(1:1000, 100000,replace = TRUE),]
return(entropy(real$Y_bin) - entropy(btstp$Y_bin))
})
plot(density(entr_diff))
summary(entr_diff)
ggplot(entr_diff)
ggplot(as.data.frame(entr_diff))
ggplot(as.data.frame(entr_diff)) + geom_histogram()
ggplot(as.data.frame(entr_diff)) + geom_density()
as.data.frame(entr_diff)
ggplot(as.data.frame(entr_diff), aes(x = "entr_diff")) + geom_density()
ggplot(as.data.frame(entr_diff), aes(x = "entr_diff")) + geom_density()
plot(x=1)
setwd("~/db_personal")
setwd("cjbart")
ls()
install.packages("cjbart")
library(ggplot2)
library(cjbart)
subjects <- 250
rounds <- 5
profiles <- 2
obs <- subjects*rounds*profiles
fake_data <- data.frame(A = sample(c("a1","a2","a3"), obs, replace = TRUE),
B = sample(c("b1","b2","b3"), obs, replace = TRUE),
C = sample(c("c1","c2","c3"), obs, replace = TRUE),
D = sample(c("d1","d2","d3"), obs, replace = TRUE),
E = sample(c("e1","e2","e3"), obs, replace = TRUE),
covar1 = rep(runif(subjects, 0 ,1),
each = rounds),
covar2 = rep(sample(c(1,0),
subjects,
replace = TRUE),
each = rounds),
id1 = rep(1:subjects, each=rounds),
stringsAsFactors = TRUE)
fake_data$Y <- ifelse(fake_data$E == "e2",
rbinom(obs, 1, fake_data$covar1),
sample(c(0,1), obs, replace = TRUE))
cj_model <- cjbart(data = fake_data,
Y = "Y",
id = "id1")
het_effects <- IMCE(data = fake_data,
model = cj_model,
attribs = c("A","B","C","D","E"),
ref_levels = c("a1","b1","c1","d1","e1"),
cores = 1)
summary(het_effects)
plot(het_effects, covar = "covar1")
plot(het_effects, covar = "covar1", plot_levels = c("a2","a3","e2","e3"))
vimp_estimates <- het_vimp(imces = het_effects, cores = 1)
plot(vimp_estimates)
?plot.cjbart.vimp
knitr::opts_chunk$set(echo = TRUE)
# Import Packages
library(cjbart)
library(readr)
library(tidyverse)
library(magrittr)
library(ggplot2)
packageVersion("cjbart")
# Import data
barty <- read.csv("~/Downloads/cleaned_data_forced_choice.csv")
dim(barty)
barty[barty == ""] <- NA
barty <- na.omit(barty)
dim(barty)
colnames(barty)
# Find variables with the same value in every row
same_val <- apply(barty, 2, function(x) length(unique(x))==1)
# Remove the variables with the same value in every row
barty <- barty[, !same_val]
# Make attributes factors
barty$Cand_age <- as.factor(barty$Cand_age)
barty$Cand_gender <- as.factor(barty$Cand_gender)
barty$Cand_mar_st <- as.factor(barty$Cand_mar_st)
barty$Cand_partyID <- as.factor(barty$Cand_partyID)
barty$Cand_yrs_polexp <- as.factor(barty$Cand_yrs_polexp)
# calculate BART model
cj_model_3 <- cjbart(data = barty, Y = "selected", id = "Response.ID")
# Calculate AMCEs - doesn't work: "Error: 'AMCE' is not an exported object from 'namespace:cjbart'"
AMCE_1 <- cjbart::AMCE(barty, cj_model_3, attribs = c("Cand_age", "Cand_mar_st", "Cand_partyID", "Cand_gender", "Cand_yrs_polexp"),ref_levels = c("36","alleinstehend","SPD","male","1"), method = "bayes", alpha = 0.05, cores = 1, skip_checks = FALSE)
# calculate IMCEs --> IMCE calculates the individual-level marginal component effects from a BART-estimated conjoint model. The OMCE estimates are the result of subtracting the predicted value of each observation under the reference-level category from the predicted value of each observation under the given attribute level. If an attribute has k levels, then this will yield k-1 estimates per observation. The IMCE is the average of the OMCEs for each individual within the data.
imces <- IMCE(data = barty,
model = cj_model_3,
attribs = c("Cand_age", "Cand_mar_st", "Cand_partyID", "Cand_gender", "Cand_yrs_polexp"),
ref_levels = c("36","alleinstehend","SPD","male","1"),
cores = 3)
View(imces)
summary(imces)
summary(imces)
table(barty$Cand_age)
table(barty$Cand_gender)
table(barty$Cand_mar_st)
table(barty$Cand_partyID)
table(barty$Cand_yrs_polexp)
table(barty$inc)
barty$inc[barty$inc == 1] <- "0-1500"
barty$inc[barty$inc == 2] <- "1500-2600"
barty$inc[barty$inc == 3] <- "2600-3600"
barty$inc[barty$inc == 4] <- "3600-5000"
barty$inc[barty$inc == 5] <- "5000-18000"
table(barty$inc)
class(barty$inc)
barty$inc <- as.factor(barty$inc)
## S3 method for class 'cjbart'
plot(imces, covar = "newpartyID")
plot(imces, covar = "feministID")
y <- het_vimp(imces, outcomes = NULL, covars = NULL)
y
## S3 method for class 'cjbart.vimp' - plotting VIMP
plot(y, covars = NULL, att_levels = NULL) # not working
plot(y, covars = NULL, att_levels = NULL)
?barty
colnames(barty)
theme(axis.text.x = element_text(Angle = 90, vjust = 0.5, hjust = 1)# not working
## S3 method for class 'cjbart.vimp' - plotting VIMP
plot(y, covars = NULL, att_levels = NULL) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))# not working
