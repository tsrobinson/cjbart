-{{id_var}}) %>%
mutate_if(is.character, as.factor)
X_pred1[[attribs[i]]] <- factor(att_level,
levels = levels(data[[attribs[i]]]))
# Get predictions
pred1 <- predict(model,
newdata = bartModelMatrix(X_pred1),
mc.cores = cores)
pred1_prob <- pnorm(colMeans(pred1$yhat.test)) # Converts probit to predicted probabilities
pred0 <- predict(model,
newdata = bartModelMatrix(X_pred0),
mc.cores = cores)
pred0_prob <- pnorm(colMeans(pred0$yhat.test))
# Get OMCE for single attribute-level comparison
att_level_OMCE <- pred1_prob - pred0_prob
# Store results in data.frame
results[[as.character(att_level)]] <- att_level_OMCE
}
}
## IMCE
covars <- results %>%
select(-all_of(out_levels)) %>%
distinct(.)
if(nrow(covars) != length(unique(results[[id_var]]))) {
stop("Covariates vary within id.")
}
if(!(id_var %in% names(covars))) {
stop("Could not find id variable in covariate matrix")
}
results_imce <- results %>%
group_by_at(id_var) %>%
summarise_at(out_levels, mean) %>%
left_join(covars, by = {{id_var}})
out_obj <- list(omce = results,
imce = results_imce,
att_levels = out_levels)
class(out_obj) <- "cjbart"
return(out_obj)
}
# Function for recovering observation-level marginal component effects (OMCEs)
OMCE <- function(data, model, attribs, ref_levels, Y_var, id_var, cores = 1) {
data <- as.data.frame(data)
# Data frame to store OMCEs
results <- data %>% select_if(!(names(.) %in% attribs)) %>% select(-{{Y_var}})
# Vector to store attribute names (for future function calls)
out_levels <- c()
for (i in 1:length(attribs)) {
message("Calculating OMCEs for attribute: ", attribs[i], " [",i,"/",length(attribs),"]")
att_levels <- unique(data[[attribs[i]]][data[[attribs[i]]] != ref_levels[i]])
out_levels <- c(out_levels, as.character(att_levels))
X_pred0 <- data %>% select(-{{Y_var}},
-{{id_var}}) %>%
mutate_if(is.character, as.factor)
X_pred0[[attribs[i]]] <- factor(ref_levels[i],
levels = levels(data[[attribs[i]]]))
for (att_level in att_levels) {
X_pred1 <- data %>% select(-{{Y_var}},
-{{id_var}}) %>%
mutate_if(is.character, as.factor)
X_pred1[[attribs[i]]] <- factor(att_level,
levels = levels(data[[attribs[i]]]))
# Get predictions
pred1 <- predict(model,
newdata = bartModelMatrix(X_pred1),
mc.cores = cores)
pred1_prob <- pnorm(colMeans(pred1$yhat.test)) # Converts probit to predicted probabilities
pred0 <- predict(model,
newdata = bartModelMatrix(X_pred0),
mc.cores = cores)
pred0_prob <- pnorm(colMeans(pred0$yhat.test))
# Get OMCE for single attribute-level comparison
att_level_OMCE <- pred1_prob - pred0_prob
# Store results in data.frame
results[[as.character(att_level)]] <- att_level_OMCE
}
}
## IMCE
covars <- results %>%
select(-all_of(out_levels)) %>%
distinct(.)
if(nrow(covars) != length(unique(results[[id_var]]))) {
stop("Covariates vary within id.")
}
if(!(id_var %in% names(covars))) {
stop("Could not find id variable in covariate matrix")
}
results_imce <- results %>%
group_by_at(id_var) %>%
summarise_at(out_levels, mean) %>%
left_join(covars, by = {{id_var}})
out_obj <- list(omce = results,
imce = results_imce,
att_levels = out_levels)
class(out_obj) <- "cjbart"
return(out_obj)
}
het_effects <- OMCE(data = data,
model = train_model,
Y_var = "select",
id_var = "id",
attribs = c("transmission",
"vulnerability",
"income",
"occupation",
"age_category"),
ref_levels = c("Average risk of catching and transmitting the COVID-19 virus",
"Average risk of COVID-19 death",
"Lowest 20% income level",
"Not working",
"25 years old"),
cores = 8)
## Then plot OMCEs or IMCES:
plot(het_effects, "age",
plot_attribs = c("40 years old","65 years old","79 years old"))
ggplot(global_data, aes(x = age)) +
geom_density() +
facet_wrap(~ country, ncol = 1)
ggplot({global_data %>% filter(age > 17 & age < 100)},
aes(x = age)) +
geom_density() +
facet_wrap(~ country, ncol = 1)
ggplot({global_data %>% filter(age > 17 & age < 100)},
aes(x = age, fill = country)) +
geom_density() +
facet_wrap(~ country, ncol = 1)
## Then plot OMCEs or IMCES:
plot(het_effects, "age",
plot_attribs = c("40 years old","65 years old","79 years old"))
plot.cjbart <- function(x, covar, type = "imce", plot_attribs = NULL) {
if (type == "imce") {
plot_data <- x$imce
} else if (type == "omce") {
plot_data <- x$omce
} else {
stop("type not recognised -- please check you have specified either 'imce' or 'omce'")
}
plot_data <- plot_data %>%
pivot_longer(cols = x$att_levels, names_to = "att", values_to = "mce")
if (!is.null(plot_attribs)) {
plot_data <- filter(att %in% plot_attribs,
.data = plot_data)
}
if (nrow(plot_data) == 0) {
stop("Filtering leads to no observations -- please check plot_attribs argument.")
}
plot_data <- group_by(.data = plot_data,
att) %>%
arrange(mce, by_group = TRUE) %>%
mutate(x_order = 1:n())
base_plot <- ggplot(plot_data,
aes_string(x = "x_order", y = "mce", color = covar)) +
facet_wrap(~att, scales = "free") +
geom_point(alpha = 0.7) +
ylab(ifelse(type == "imce","IMCE","OMCE")) +
xlab(ifelse(type == "imce","Individual","Observation")) +
labs(color = str_to_sentence(covar)) +
theme(legend.position = "bottom",
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
if (typeof(plot_data[[covar]]) == "double") {
final_plot <- base_plot +
scale_color_gradient(low = "dodgerblue3", high = "goldenrod1")
} else {
final_plot <- base_plot +
scale_colour_manual(values=c("#000000", # Colour-blind friendly pallete
"#E69F00",
"#56B4E9",
"#009E73",
"#F0E442",
"#0072B2",
"#D55E00",
"#CC79A7"))
}
return(final_plot)
}
## Then plot OMCEs or IMCES:
plot(het_effects, "age",
plot_attribs = c("40 years old","65 years old","79 years old"))
size(model)
sizeof(model)
object.size(train_model)
View(train_model)
het_effects$omce
summary(global_data)
x <- het_effects
x$omce
x$att_levels
# OMCE summary
x$omce %>%
select(all_of(x$att_levels))
x$imce %>%
select(all_of(x$att_levels)) %>%
colMeans(.)
# IMCE summary
AMCE <- x$imce %>%
select(all_of(x$att_levels)) %>%
colMeans(.)
x$imce %>%
select(all_of(x$att_levels)) %>%
summarise_all(AMCE = colMeans,
Min. = min,
Max. = max)
# IMCE summary
summary_tab <- x$imce %>%
select(all_of(x$att_levels)) %>%
summarise_all(AMCE = colMeans,
Min. = min,
Max. = max)
# IMCE summary
summary_tab <- x$imce %>%
select(all_of(x$att_levels)) %>%
across(AMCE = colMeans,
Min. = min,
Max. = max)
# IMCE summary
summary_tab <- x$imce %>%
summarise(across(all_of(x$att_levels)),
AMCE = colMeans,
Min. = min,
Max. = max)
# IMCE summary
summary_tab <- x$imce %>%
summarise(across(all_of(x$att_levels)),
colMeans,
min,
max)
# IMCE summary
summary_tab <- x$imce %>%
summarise(across(all_of(x$att_levels)),
mean,
min,
max)
# IMCE summary
summary_tab <- x$imce %>%
summarise(across(all_of(x$att_levels)),
.fns = list(Mean = mean, `Min.` = min, `Max.` = max))
# IMCE summary
summary_tab <- x$imce %>%
summarise(across(all_of(x$att_levels)),
.fns = list(Mean = mean, Min = min, Max = max))
# IMCE summary
summary_tab <- x$imce %>%
summarise(across(all_of(x$att_levels)),
list(Mean = mean, Min = min, Max = max))
# IMCE summary
summary_tab <- x$imce %>%
summarise(mean)
x$imce
# IMCE summary
summary_tab <- x$imce %>%
as_tibble(.) %>%
summarise(across(all_of(x$att_levels)),
list(Mean = mean, Min = min, Max = max))
x$imce %>%
as_tibble(.)
# IMCE summary
AMCE <- x$imce %>%
select(all_of(x$att_levels)) %>%
colMeans(.)
sapply(IMCE_only,2,min)
# IMCE summary
IMCE_only <- x$imce %>% select(all_of(x$att_levels))
AMCE <- colMeans(IMCE_only)
mins <- sapply(IMCE_only,2,min)
IMCE_only
apply(IMCE_only,2,min)
mins <- apply(IMCE_only,2,min)
AMCE <- colMeans(IMCE_only)
mins <- apply(IMCE_only,2,min)
maxs <- apply(IMCE_only,2,max)
sd <- apply(IMCE_only,2,sd)
names(IMCE_only)
sds <- apply(IMCE_only,2,sd)
summary_tab <- data.frame(Attribute = names(IMCE_only),
AMCE = AMCE,
`Min.` = mins,
`Max.` = maxs,
`Std.Dev` = sds)
summary_tab
print(kable(summary_tab))
print(knitr::kable(summary_tab))
require(kableExtra)
require(kable)
require(knitr)
install.packages("kableExtra")
require(knitr)
require(kableExtra)
kable(summary_tab) %>%
kable_styling(full_width = F) %>%
print(.)
test
test <- "abc"
substr(test,1,5)
substr(test,1,50)
substr(test,1,2)
att_names <- att_levels %>%
ifelse(nchar(.) > 15, paste0(substr(.,1,15),"..."), .)
att_names <- x$att_levels %>%
ifelse(nchar(.) > 15, paste0(substr(.,1,15),"..."), .)
att_names
att_names <- x$att_levels %>%
ifelse(nchar(.) > 20, paste0(substr(.,1,20),"..."), .)
att_names
att_names <- x$att_levels %>%
ifelse(nchar(.) > 25, paste0(substr(.,1,25),"..."), .)
att_names
# IMCE summary
IMCE_only <- x$imce %>% select(all_of(x$att_levels))
AMCE <- colMeans(IMCE_only)
mins <- apply(IMCE_only,2,min)
maxs <- apply(IMCE_only,2,max)
sds <- apply(IMCE_only,2,sd)
att_names <- x$att_levels %>%
ifelse(nchar(.) > 25, paste0(substr(.,1,25),"..."), .)
summary_tab <- data.frame(Attribute = att_names,
AMCE = AMCE,
`Min.` = mins,
`Max.` = maxs,
`Std.Dev` = sds)
print(knitr::kable(summary_tab))
detach("package:kableExtra", unload = TRUE)
print(knitr::kable(summary_tab))
print(summary_tab)
summary_tab <- data.frame(Attribute = att_names,
AMCE = AMCE,
`Min.` = mins,
`Max.` = maxs,
`Std.Dev` = sds,
row.names = FALSE)
print(summary_tab)
summary_tab <- data.frame(Attribute = att_names,
AMCE = AMCE,
`Min.` = mins,
`Max.` = maxs,
`Std.Dev` = sds,
row.names = NULL)
print(summary_tab)
summary.cjbart <- function(x) {
require(knitr)
require(kableExtra)
# IMCE summary
IMCE_only <- x$imce %>% select(all_of(x$att_levels))
AMCE <- colMeans(IMCE_only)
mins <- apply(IMCE_only,2,min)
maxs <- apply(IMCE_only,2,max)
sds <- apply(IMCE_only,2,sd)
att_names <- x$att_levels %>%
ifelse(nchar(.) > 25, paste0(substr(.,1,25),"..."), .)
summary_tab <- data.frame(Attribute = att_names,
AMCE = AMCE,
`Min.` = mins,
`Max.` = maxs,
`Std.Dev` = sds,
row.names = NULL)
print(summary_tab)
}
summary(het_effects)
test <- summary(het_effects)
test
View(test)
summary(het_effects)
summary.cjbart <- function(x) {
require(knitr)
require(kableExtra)
# IMCE summary
IMCE_only <- x$imce %>% select(all_of(x$att_levels))
AMCE <- colMeans(IMCE_only)
mins <- apply(IMCE_only,2,min)
maxs <- apply(IMCE_only,2,max)
sds <- apply(IMCE_only,2,sd)
att_names <- x$att_levels %>%
ifelse(nchar(.) > 30, paste0(substr(.,1,30),"..."), .)
summary_tab <- data.frame(Attribute = att_names,
AMCE = AMCE,
`Min.` = mins,
`Max.` = maxs,
`Std.Dev` = sds,
row.names = NULL)
print(summary_tab)
}
summary(het_effects)
summary.cjbart <- function(x) {
# IMCE summary
IMCE_only <- x$imce %>% select(all_of(x$att_levels))
AMCE <- colMeans(IMCE_only)
mins <- apply(IMCE_only,2,min)
maxs <- apply(IMCE_only,2,max)
sds <- apply(IMCE_only,2,sd)
att_names <- x$att_levels %>%
ifelse(nchar(.) > 30, paste0(substr(.,1,30),"..."), .)
summary_tab <- data.frame(Attribute = att_names,
AMCE = AMCE,
`Min.` = mins,
`Max.` = maxs,
`Std.Dev` = sds,
row.names = NULL)
message("Summary table of individual marginal component effects (IMCEs)")
print(summary_tab)
}
summary(het_effects)
# Function for recovering observation-level marginal component effects (OMCEs)
OMCE <- function(data, model, attribs, ref_levels, Y_var, id_var, cores = 1) {
data <- as.data.frame(data)
# Data frame to store OMCEs
results <- data %>% select_if(!(names(.) %in% attribs)) %>% select(-{{Y_var}})
# Vector to store attribute names (for future function calls)
out_levels <- c()
for (i in 1:length(attribs)) {
message("Calculating OMCEs for attribute: ", attribs[i], " [",i,"/",length(attribs),"]")
att_levels <- unique(data[[attribs[i]]][data[[attribs[i]]] != ref_levels[i]])
out_levels <- c(out_levels, as.character(att_levels))
X_pred0 <- data %>% select(-{{Y_var}},
-{{id_var}}) %>%
mutate_if(is.character, as.factor)
X_pred0[[attribs[i]]] <- factor(ref_levels[i],
levels = levels(data[[attribs[i]]]))
for (att_level in att_levels) {
X_pred1 <- data %>% select(-{{Y_var}},
-{{id_var}}) %>%
mutate_if(is.character, as.factor)
X_pred1[[attribs[i]]] <- factor(att_level,
levels = levels(data[[attribs[i]]]))
# Get predictions
pred1 <- predict(model,
newdata = bartModelMatrix(X_pred1),
mc.cores = cores)
pred1_prob <- pnorm(colMeans(pred1$yhat.test)) # Converts probit to predicted probabilities
pred0 <- predict(model,
newdata = bartModelMatrix(X_pred0),
mc.cores = cores)
pred0_prob <- pnorm(colMeans(pred0$yhat.test))
# Get OMCE for single attribute-level comparison
att_level_OMCE <- pred1_prob - pred0_prob
# Store results in data.frame
results[[as.character(att_level)]] <- att_level_OMCE
}
}
## IMCE
covars <- results %>%
select(-all_of(out_levels)) %>%
distinct(.)
if(nrow(covars) != length(unique(results[[id_var]]))) {
stop("Covariates vary within id.")
}
if(!(id_var %in% names(covars))) {
stop("Could not find id variable in covariate matrix")
}
results_imce <- results %>%
group_by_at(id_var) %>%
summarise_at(out_levels, mean) %>%
left_join(covars, by = {{id_var}})
out_obj <- list(omce = results,
imce = results_imce,
attribs = attribs,
att_levels = out_levels)
class(out_obj) <- "cjbart"
return(out_obj)
}
data
bartModelMatrix(data)
bartModelMatrix(data.frame(data))
# IMCE summary
IMCE_only <- x$imce %>% select(all_of(x$att_levels))
IMCE_only
# IMCE summary
IMCE_only <- x$imce %>% select(all_of(x$att_levels))
AMCE <- colMeans(IMCE_only)
mins <- apply(IMCE_only,2,min)
maxs <- apply(IMCE_only,2,max)
sds <- apply(IMCE_only,2,sd)
att_names <- x$att_levels %>%
ifelse(nchar(.) > 30, paste0(substr(.,1,30),"..."), .)
summary_tab <- tibble(Attribute = ,
Level = att_names,
AMCE = AMCE,
`Min.` = mins,
`Max.` = maxs,
`Std.Dev` = sds,
row.names = NULL)
x$imce
summary.cjbart <- function(x) {
# IMCE summary
IMCE_only <- x$imce %>% select(all_of(x$att_levels))
AMCE <- colMeans(IMCE_only)
mins <- apply(IMCE_only,2,min)
maxs <- apply(IMCE_only,2,max)
sds <- apply(IMCE_only,2,sd)
att_names <- x$att_levels %>%
ifelse(nchar(.) > 30, paste0(substr(.,1,30),"..."), .)
summary_tab <- tibble(Level = att_names,
AMCE = AMCE,
`Min.` = mins,
`Max.` = maxs,
`Std.Dev` = sds,
row.names = NULL)
message("Summary table of individual marginal component effects (IMCEs)")
print(summary_tab)
}
summary(het_effects)
## Then plot OMCEs or IMCES:
plot(het_effects, "age",
plot_attribs = c("40 years old","65 years old","79 years old"))
setwd("~/Dropbox")
devtools::create('cjbart')
library(roxygen)
library(roxygen2)
roxygen2::roxygenise
roxygen2::roxygenise()
setwd("~/Dropbox/cjbart")
roxygen2::roxygenise()
devtools::build_readme()
getwd()
